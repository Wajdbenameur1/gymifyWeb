security:
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        in_memory:
            memory:
                users:
                    admin:
                        password: 'admin_password'
                        roles: ['ROLE_ADMIN']
                    responsable:
                        password: 'responsable_password'
                        roles: ['ROLE_RESPONSABLE_SALLE']
                    sportif:
                        password: 'sportif_password'
                        roles: ['ROLE_SPORTIF']
                    entraineur:
                        password: 'entraineur_password'
                        roles: ['ROLE_ENTRAINEUR']
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
        ROLE_ENTRAINEUR: [ROLE_USER]
        ROLE_RESPONSABLE_SALLE: [ROLE_USER]
        ROLE_SPORTIF: [ROLE_USER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
                username_parameter: email
                password_parameter: password
                enable_csrf: true
            logout:
                path: app_logout
                target: app_login
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800  # 1 week
                path: /
            entry_point: App\Security\AppCustomAuthenticator





            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

   

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon




    access_control:
        - { path: ^/admin/user, roles: ROLE_ADMIN }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/dashboard_entraineur, roles: ROLE_ENTRAINEUR }
        - { path: ^/dashboard_responsable_salle, roles: ROLE_RESPONSABLE_SALLE }
        - { path: ^/home, roles: ROLE_SPORTIF }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register/sportif, roles: PUBLIC_ACCESS }
        - { path: ^/reclamation, roles: ROLE_USER }



        - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY } # Explicit rule
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }


        - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }


        - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }


        - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

