{% extends 'sportifdashboard/homepagesportif.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.ckeditor.com/4.21.0/standard/ckeditor.js"></script>
    <link rel="stylesheet" href="{{ asset('/css/PostStyle.css') }}" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
          integrity="sha512-R6HkF9T/5xk6slM7e4rWJZlGJrxO46hKBGG+1ZC43nlGQskM3Qj8Zc+V9OeGmFUyPNKO6kVoZ8iI2EN9MdXYUg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
          
    <style>
        /* Spinner styles */
        .spinner-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(255, 255, 255, 0.8);
            z-index: 1000;
        }
        
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .audio-file-input {
            display: none;
        }
        
        /* Toast notification */
        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background-color: #333;
            color: white;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 9999;
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.3s, transform 0.3s;
            max-width: 80%;
            word-break: break-word;
        }
        
        .toast-notification.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .toast-notification.success {
            background-color: #28a745;
        }
        
        .toast-notification.error {
            background-color: #dc3545;
        }
        
        .toast-notification.info {
            background-color: #17a2b8;
        }
        
        /* Debug panel */
        .debug-panel {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 9000;
            display: none;
        }
        
        .debug-panel.visible {
            display: block;
        }
        
        .debug-toggle {
            position: fixed;
            bottom: 10px;
            right: 10px;
            z-index: 9999;
            width: 30px;
            height: 30px;
            background-color: rgba(0,0,0,0.5);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 16px;
        }
        
        .debug-content {
            background-color: rgba(0,0,0,0.8);
            color: #00ff00;
            padding: 10px;
            border-radius: 5px;
            font-family: monospace;
            width: 300px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .debug-actions {
            margin-top: 10px;
            display: flex;
            gap: 5px;
        }
        
        .debug-btn {
            font-size: 12px;
            padding: 3px 8px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid mt-5 px-4">
    <h2 class="mb-4 post-title-animated">{{ 'blog.edit_post'|trans }}</h2>

    {{ form_start(form, {
        'attr': {'data-parsley-validate': '', 'enctype': 'multipart/form-data'}
    }) }}

    {# ========== TITLE ========== #}
    <div class="mb-4">
        {{ form_label(form.title, 'Title <span class="text-danger">*</span>', {
            'label_attr': {'class': 'form-label'},
            'label_html': true
        }) }}
        {{ form_widget(form.title, {
            'attr': {
                'class': 'form-control',
                'data-parsley-trigger': 'keyup',
                'data-parsley-minlength': '3',
                'data-parsley-minlength-message': 'Le titre doit contenir au moins 3 caract√®res.'
            }
        }) }}
        <div class="text-danger">{{ form_errors(form.title) }}</div>
    </div>

    {# ========== ROW DROPZONE + CONTENT ========== #}
    <div class="row align-items-start">
        {# -- Colonne gauche -- #}
        <div class="col-lg-6">
            <div class="mb-4">
                <label class="form-label d-block">{{ 'blog.image'|trans }}</label>
                <div id="dropzone"
                     class="dropzone"
                     data-existing="{{ existingImage ? existingImage : '' }}">
                     <i class="fas fa-cloud-upload-alt fa-3x dropzone-icon" style="color: #74C0FC;"></i>
                </div>
            </div>
            <div class="mb-4">
                {{ form_label(form.webImage, "Url", {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.webImage, {
                    'attr': {
                        'class': 'form-control',
                        'placeholder': "Choose url or drop file"
                    }
                }) }}
                <div class="text-danger">{{ form_errors(form.webImage) }}</div>
            </div>
            <div style="display:none">{{ form_row(form.imageFile) }}</div>
        </div>

        {# -- Colonne droite -- #}
        <div class="col-lg-6">
            <div class="mb-4 position-relative">
                {{ form_label(form.content, 'Content <span class="text-danger">*</span>', {
                    'label_attr': {'class': 'form-label'},
                    'label_html': true
                }) }}
                {{ form_widget(form.content, {
                    'attr': {
                        'class': 'form-control',
                        'id': 'post_content',
                        'data-parsley-trigger': 'keyup',
                        'data-parsley-cleancontent': '',
                        'data-parsley-forbiddenwords': ''
                    }
                }) }}
                <div class="text-danger">{{ form_errors(form.content) }}</div>
                
                <!-- Spinner (hidden by default) -->
                <div id="spinner-container" class="spinner-container" style="display: none;">
                    <div class="spinner"></div>
                </div>
            </div>
            
            <!-- Audio file input (hidden) -->
            <input type="file" id="audioFileInput" class="audio-file-input" accept="audio/*" />
            
            <div class="d-flex align-items-center justify-content-between mb-4">
                <button type="button" id="speechToTextBtn" class="btn btn-warning speech-btn">
                    <i class="fas fa-microphone"></i> {{ 'blog.speech_to_text'|trans }}
                </button>
                
                <span id="directUploadToggle" class="text-muted" style="cursor: pointer; font-size: 0.8rem;">
                    <i class="fas fa-cog"></i> {{ 'blog.direct_upload'|trans }}: <span id="directUploadStatus">{{ 'blog.off'|trans }}</span>
                </span>
            </div>
        </div>
    </div>

    <div class="hstack gap-2 justify-content-center mb-3">
        <button class="btn btn-primary">{{ 'blog.update'|trans }}</button>
    </div>

    {{ form_end(form) }}
    
    <!-- Toast notification container -->
    <div id="toast" class="toast-notification">
        <span id="toastMessage"></span>
    </div>
    
    <!-- Debug panel (initially hidden) -->
    <div class="debug-toggle" id="debugToggle">
        <i class="fas fa-bug"></i>
    </div>
    
    <div class="debug-panel" id="debugPanel">
        <div class="debug-content" id="debugContent">
            <h6>Debug Info</h6>
            <div id="debugLog"></div>
        </div>
        <div class="debug-actions">
            <button class="btn btn-sm btn-danger debug-btn" id="clearDebug">Clear</button>
            <button class="btn btn-sm btn-secondary debug-btn" id="testSpeechApi">Test API</button>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/parsley.js/2.9.2/parsley.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize debug panel
        let debugActive = false;
        const debugToggle = document.getElementById('debugToggle');
        const debugPanel = document.getElementById('debugPanel');
        const debugContent = document.getElementById('debugContent');
        const clearDebugBtn = document.getElementById('clearDebug');
        const testSpeechApiBtn = document.getElementById('testSpeechApi');
        
        // Debugging functions
        function debugLog(message) {
            if (!debugActive) return;
            
            const logEntry = document.createElement('div');
            logEntry.classList.add('log-entry');
            
            // Format timestamp
            const now = new Date();
            const timestamp = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}.${now.getMilliseconds().toString().padStart(3, '0')}`;
            
            logEntry.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`;
            
            const debugLog = document.getElementById('debugLog');
            debugLog.appendChild(logEntry);
            debugLog.scrollTop = debugLog.scrollHeight;
        }
        
        // Toggle debug panel
        debugToggle.addEventListener('click', function() {
            debugActive = !debugActive;
            debugPanel.classList.toggle('visible', debugActive);
            debugToggle.style.backgroundColor = debugActive ? '#17a2b8' : 'rgba(0,0,0,0.5)';
            debugLog('Debug mode ' + (debugActive ? 'activated' : 'deactivated'));
        });
        
        // Clear debug log
        clearDebugBtn.addEventListener('click', function() {
            document.getElementById('debugLog').innerHTML = '';
            debugLog('Debug log cleared');
        });
        
        // Test speech API endpoint
        testSpeechApiBtn.addEventListener('click', function() {
            debugLog('Testing speech API connection...');
            
            fetch('/speech-to-text/test-connection')
                .then(response => response.json())
                .then(data => {
                    debugLog(`API test response: ${JSON.stringify(data)}`);
                    showToast(data.message || 'API test completed', data.success ? 'success' : 'error');
                })
                .catch(error => {
                    debugLog(`API test error: ${error.message}`);
                    showToast('API test failed: ' + error.message, 'error');
                });
        });
        
        // Toast notification
        let toastTimeout;
        function showToast(message, type = 'info') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            // Clear previous timeout
            if (toastTimeout) {
                clearTimeout(toastTimeout);
            }
            
            // Set message and type
            toastMessage.textContent = message;
            toast.className = 'toast-notification';
            toast.classList.add(type);
            
            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 10);
            
            // Auto hide after 5 seconds
            toastTimeout = setTimeout(() => {
                toast.classList.remove('show');
            }, 5000);
            
            debugLog(`Toast shown: "${message}" (${type})`);
        }
        
        // Direct upload toggle
        let directUploadEnabled = false;
        const directUploadToggle = document.getElementById('directUploadToggle');
        const directUploadStatus = document.getElementById('directUploadStatus');
        
        directUploadToggle.addEventListener('click', function() {
            directUploadEnabled = !directUploadEnabled;
            directUploadStatus.textContent = directUploadEnabled ? '{{ 'blog.on'|trans }}' : '{{ 'blog.off'|trans }}';
            directUploadStatus.style.color = directUploadEnabled ? '#28a745' : '#6c757d';
            
            debugLog(`Direct upload mode ${directUploadEnabled ? 'enabled' : 'disabled'}`);
            showToast(`{{ 'blog.direct_upload'|trans }}: ${directUploadEnabled ? '{{ 'blog.on'|trans }}' : '{{ 'blog.off'|trans }}'}`, 'info');
        });
        
        // Initialize CKEditor
        CKEDITOR.replace('post_content', {
            entities: false,
            entities_latin: false,
            extraPlugins: 'mentions',
            removePlugins: 'exportpdf,image,image2',
            mentions: [{
                feed: function(options, callback) {
                    // This could be replaced with an actual API call to fetch users
                    const users = [
                        { id: 1, name: 'Anna' },
                        { id: 2, name: 'Thomas' },
                        { id: 3, name: 'Alice' }
                    ];
                    
                    callback(
                        users
                            .filter(user => user.name.toLowerCase().includes(options.query.toLowerCase()))
                            .map(user => ({ id: user.id, name: user.name }))
                    );
                },
                minChars: 1,
                marker: '@',
                itemTemplate: '<li data-id="{id}">{name}</li>'
            }],
            toolbar: [
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Strike', '-', 'RemoveFormat'] },
                { name: 'paragraph', items: ['NumberedList', 'BulletedList', '-', 'Blockquote'] },
                { name: 'links', items: ['Link', 'Unlink'] },
                { name: 'insert', items: ['Table', 'HorizontalRule', 'SpecialChar'] },
                { name: 'tools', items: ['Maximize'] },
                { name: 'styles', items: ['Styles', 'Format'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] }
            ]
        });
        
        // Initialize Dropzone
        Dropzone.autoDiscover = false;
        
        const myDropzone = new Dropzone("#dropzone", {
            url: "{{ path('app_post_upload') }}",
            maxFiles: 1,
            maxFilesize: 5, // MB
            acceptedFiles: "image/*",
            addRemoveLinks: true,
            dictDefaultMessage: "{{ 'blog.drop_files_here'|trans }}",
            headers: {
                'X-CSRF-TOKEN': "{{ csrf_token('upload') }}"
            },
            init: function() {
                const dz = this;
                const existingImage = document.getElementById('dropzone').dataset.existing;
                
                if (existingImage) {
                    debugLog(`Loading existing image: ${existingImage}`);
                    
                    const mockFile = { 
                        name: existingImage.split('/').pop(),
                        size: 12345,
                        accepted: true,
                        status: Dropzone.ADDED
                    };
                    
                    dz.emit("addedfile", mockFile);
                    dz.emit("thumbnail", mockFile, existingImage);
                    dz.emit("complete", mockFile);
                    dz.files.push(mockFile);
                }
                
                this.on("success", function(file, response) {
                    debugLog(`File uploaded successfully: ${response.filename}`);
                    document.querySelector('#post_webImage').value = response.path;
                    showToast('{{ 'blog.image_uploaded'|trans }}', 'success');
                });
                
                this.on("error", function(file, errorMessage) {
                    debugLog(`Upload error: ${errorMessage}`);
                    showToast('{{ 'blog.upload_error'|trans }}: ' + errorMessage, 'error');
                });
                
                this.on("removedfile", function() {
                    document.querySelector('#post_webImage').value = '';
                    debugLog('File removed from dropzone');
                });
            }
        });
        
        // Handle speech-to-text functionality
        const speechToTextBtn = document.getElementById('speechToTextBtn');
        const audioFileInput = document.getElementById('audioFileInput');
        const spinnerContainer = document.getElementById('spinner-container');
        
        speechToTextBtn.addEventListener('click', function() {
            if (directUploadEnabled) {
                // Direct audio upload mode
                audioFileInput.click();
            } else {
                // Browser speech recognition API mode
                if ('webkitSpeechRecognition' in window) {
                    const recognition = new webkitSpeechRecognition();
                    recognition.continuous = true;
                    recognition.interimResults = true;
                    recognition.lang = '{{ app.request.locale }}';
                    
                    let finalTranscript = '';
                    
                    recognition.onstart = function() {
                        debugLog('Speech recognition started');
                        speechToTextBtn.innerHTML = '<i class="fas fa-circle text-danger"></i> {{ 'blog.recording'|trans }}...';
                        speechToTextBtn.classList.add('btn-danger');
                        speechToTextBtn.classList.remove('btn-warning');
                        showToast('{{ 'blog.recording_started'|trans }}', 'info');
                    };
                    
                    recognition.onresult = function(event) {
                        let interimTranscript = '';
                        
                        for (let i = event.resultIndex; i < event.results.length; ++i) {
                            if (event.results[i].isFinal) {
                                finalTranscript += event.results[i][0].transcript;
                                debugLog(`Final transcript: ${event.results[i][0].transcript}`);
                            } else {
                                interimTranscript += event.results[i][0].transcript;
                            }
                        }
                        
                        if (finalTranscript.length > 0) {
                            // Insert into CKEditor
                            const editor = CKEDITOR.instances.post_content;
                            editor.insertText(finalTranscript + ' ');
                            finalTranscript = '';
                        }
                    };
                    
                    recognition.onerror = function(event) {
                        debugLog(`Recognition error: ${event.error}`);
                        showToast(`{{ 'blog.recognition_error'|trans }}: ${event.error}`, 'error');
                        speechToTextBtn.innerHTML = '<i class="fas fa-microphone"></i> {{ 'blog.speech_to_text'|trans }}';
                        speechToTextBtn.classList.remove('btn-danger');
                        speechToTextBtn.classList.add('btn-warning');
                    };
                    
                    recognition.onend = function() {
                        debugLog('Speech recognition ended');
                        speechToTextBtn.innerHTML = '<i class="fas fa-microphone"></i> {{ 'blog.speech_to_text'|trans }}';
                        speechToTextBtn.classList.remove('btn-danger');
                        speechToTextBtn.classList.add('btn-warning');
                        showToast('{{ 'blog.recording_ended'|trans }}', 'info');
                    };
                    
                    recognition.start();
                    
                    // Stop after 30 seconds of recording
                    setTimeout(() => {
                        if (recognition) {
                            recognition.stop();
                        }
                    }, 30000);
                } else {
                    debugLog('Web Speech API not supported in this browser');
                    showToast('{{ 'blog.speech_api_not_supported'|trans }}', 'error');
                }
            }
        });
        
        // Handle audio file uploads
        audioFileInput.addEventListener('change', function(e) {
            if (!e.target.files.length) return;
            
            const file = e.target.files[0];
            debugLog(`Audio file selected: ${file.name} (${(file.size/1024/1024).toFixed(2)} MB)`);
            
            if (file.size > 25 * 1024 * 1024) { // 25MB limit
                showToast('{{ 'blog.file_too_large'|trans }}', 'error');
                return;
            }
            
            const formData = new FormData();
            formData.append('audio', file);
            formData.append('_token', "{{ csrf_token('speech_to_text') }}");
            
            // Show spinner
            spinnerContainer.style.display = 'flex';
            showToast('{{ 'blog.processing_audio'|trans }}...', 'info');
            
            fetch('/speech-to-text', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                spinnerContainer.style.display = 'none';
                
                if (data.success && data.text) {
                    debugLog(`Transcription received: ${data.text.substring(0, 100)}...`);
                    
                    // Insert into CKEditor
                    const editor = CKEDITOR.instances.post_content;
                    editor.insertText(data.text + ' ');
                    
                    showToast('{{ 'blog.transcription_complete'|trans }}', 'success');
                } else {
                    debugLog(`Transcription error: ${data.error}`);
                    showToast(data.error || '{{ 'blog.transcription_error'|trans }}', 'error');
                }
            })
            .catch(error => {
                spinnerContainer.style.display = 'none';
                debugLog(`API error: ${error.message}`);
                showToast('{{ 'blog.api_error'|trans }}: ' + error.message, 'error');
            });
            
            // Clear input so the same file can be selected again
            this.value = '';
        });
        
        // Add custom Parsley validators
        window.Parsley.addValidator('cleancontent', {
            validateString: function(value) {
                // This validator passes if content has no script tags
                return !(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi.test(value));
            },
            messages: {
                en: 'Content cannot contain scripts for security reasons.',
                fr: 'Le contenu ne peut pas contenir de scripts pour des raisons de s√©curit√©.'
            }
        });
        
        window.Parsley.addValidator('forbiddenwords', {
            validateString: function(value) {
                // Define your list of forbidden words
                const forbiddenWords = ['spam', 'scam', 'hack', 'crack'];
                const lowercaseValue = value.toLowerCase();
                
                // Check if any forbidden word is in the content
                return !forbiddenWords.some(word => lowercaseValue.includes(word));
            },
            messages: {
                en: 'Content contains prohibited words.',
                fr: 'Le contenu contient des mots interdits.'
            }
        });
    });
</script>
{% endblock %}
