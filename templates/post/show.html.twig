{% extends 'sportifdashboard/homepagesportif.html.twig' %}

{% block title %}{{ post.title }}{% endblock %}

{% block body_attrs %}
  {{ parent() }}
  data-user-id="{{ app.user ? app.user.id : '' }}"
{% endblock %}

{% block stylesheet %}
  {{ parent() }}
  <link rel="stylesheet" href="{{ asset('css/post-style.css') }}">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    /* Facebook-like mention styling */
    .user-mention {
      color: #00CED1 !important; /* Turquoise blue */
      font-weight: 500 !important;
      background-color: rgba(0, 206, 209, 0.1) !important;
      padding: 0 3px !important;
      border-radius: 4px !important;
      text-decoration: none !important;
      display: inline-block !important;
    }
    
    .user-mention:hover {
      text-decoration: underline !important;
      background-color: rgba(0, 206, 209, 0.2) !important;
      cursor: pointer !important;
    }
    
    .alert {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 4px;
      z-index: 1050;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      animation: slideIn 0.3s ease-out;
    }
    
    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }
    
    .alert-error {
      background-color: #f8d7da;
      color: #721c24;
      border-left: 4px solid #dc3545;
    }
    
    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
    
    @keyframes slideOut {
      from {
        transform: translateX(0);
        opacity: 1;
      }
      to {
        transform: translateX(100%);
        opacity: 0;
      }
    }
    
    .sensitive-content {
      background-color: #fff8e1;
      padding: 10px;
      border-radius: 4px;
      position: relative;
    }
    
    .edit-form {
      margin-top: 10px;
    }

    /* Styles from post/index.html.twig for comments */
    .comment-actions {
        opacity: 0;
        transition: opacity 0.3s ease, transform 0.2s ease;
        display: inline-flex !important;
        gap: 12px;
        align-items: center;
        position: absolute !important;
        right: 10px !important;
        top: 50% !important;
        transform: translateY(-50%) !important;
        z-index: 100 !important;
    }

    .comment-container:hover .comment-actions {
        opacity: 1 !important;
    }

    .btn-icon {
        padding: 8px !important;
        border-radius: 50% !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2) !important;
        border: none !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        cursor: pointer !important;
        width: 36px !important;
        height: 36px !important;
    }

    .btn-icon:hover {
        transform: translateY(-3px) !important;
        box-shadow: 0 4px 8px rgba(0,0,0,0.25) !important;
    }

    /* Couleurs et styles pour les icônes */
    .btn-icon.edit {
        background-color: #2196F3 !important;
    }
    
    .btn-icon.edit i {
        color: white !important;
        font-size: 1rem !important;
    }

    .btn-icon.delete {
        background-color: #dc3545 !important;
    }

    .btn-icon.delete i {
        color: white !important;
        font-size: 1rem !important;
    }

    /* Effets de survol améliorés */
    .btn-icon.edit:hover {
        background-color: #0d8bf2 !important;
    }

    .btn-icon.delete:hover {
        background-color: #c82333 !important;
    }

    /* Style pour les tooltips */
    [data-tooltip] {
        position: relative !important;
    }

    [data-tooltip]:before {
        content: attr(data-tooltip);
        position: absolute !important;
        bottom: 120% !important;
        left: 50% !important;
        transform: translateX(-50%) translateY(-5px) !important;
        padding: 6px 12px !important;
        background: rgba(0, 0, 0, 0.8) !important;
        color: white !important;
        font-size: 12px !important;
        font-weight: 500 !important;
        white-space: nowrap !important;
        border-radius: 4px !important;
        opacity: 0 !important;
        visibility: hidden !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2) !important;
        z-index: 100 !important;
    }

    [data-tooltip]:hover:before {
        opacity: 1 !important;
        visibility: visible !important;
        transform: translateX(-50%) translateY(-10px) !important;
    }

    .sensitive-warning {
        color: #856404;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 5px;
    }
  </style>
{% endblock %}

{% block body %}
<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="{{ path('app_post_index') }}">{{ 'blog.blogs'|trans }}</a></li>
    <li class="breadcrumb-item active" aria-current="page">{{ post.title }}</li>
  </ol>
</nav>

<div class="container">
  <div class="row justify-content-center">
    <div class="col-12 col-xl-10 p-0">
      <div class="d-flex" style="height: 80vh; border: 1px solid #ddd; border-radius: 10px; overflow: hidden;">

        {# Colonne gauche : image du post #}
        <div class="col-md-7 d-none d-md-block bg-dark p-0">
          {% if post.imageUrl %}
            <img src="{{ asset(post.webPath) }}" class="w-100 h-100" style="object-fit: cover;" alt="Image du post">
          {% else %}
            <div class="w-100 h-100 d-flex align-items-center justify-content-center text-white">
              {{ 'blog.no_image'|trans }}
            </div>
          {% endif %}
        </div>

        {# Colonne droite : contenu & commentaires #}
        <div class="col-md-5 d-flex flex-column bg-white p-0">

          {# Header avec avatar et auteur #}
          <div class="d-flex align-items-center p-3 border-bottom">
            <img 
              src="{{ post.user.imageUrl ? asset(post.user.imageUrl) : asset('img/screen/user.png') }}"
              class="rounded-circle me-2" 
              style="width:32px; height:32px; object-fit:cover;"
              alt="Avatar {{ post.user.nom }}">
            <strong>{{ post.user.nom }}</strong>
          </div>

          {# Contenu du post #}
          <div class="p-3 border-bottom flex-grow-0">
            <h5>{{ post.title }}</h5>
            <p class="mb-1">{{ post.content|raw }}</p>
            <small class="text-muted">{{ post.createdAt ? post.createdAt|date('d M Y à H:i') : '—' }}</small>
          </div>

          {# Section commentaires (scrollable) #}
          <div class="flex-grow-1 overflow-auto p-3" style="min-height:0;">
            {% for comment in post.comments %}
              <div class="d-flex align-items-start mb-3">
                <img 
                  src="{{ comment.user.imageUrl ? asset(comment.user.imageUrl) : asset('img/screen/user.png') }}"
                  alt="Avatar commentateur"
                  class="rounded-circle me-2"
                  style="width:32px; height:32px; object-fit:cover;"
                >
                <div class="comment-container w-100 position-relative">
                  <strong>{{ comment.user.nom }}</strong>
                  <p class="comment-content mb-1">{{ comment.content|raw }}</p>
                  <small class="text-muted">{{ comment.createdAt|date('d M Y à H:i') }}</small>

                  {% if comment.user == app.user %}
                    <div class="comment-actions">
                      <button class="btn-icon edit js-edit-comment-btn" 
                              data-comment-id="{{ comment.id }}"
                              data-token="{{ csrf_token('edit-comment' ~ comment.id) }}"
                              data-tooltip="{{ 'blog.edit'|trans }}">
                          <i class="fas fa-edit"></i>
                      </button>
                      <form action="{{ path('app_comment_delete', {id: comment.id}) }}" 
                            method="post" 
                            class="js-delete-comment-form d-inline" 
                            data-post-id="{{ post.id }}">
                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ comment.id) }}">
                        <button type="submit" class="btn-icon delete" data-tooltip="{{ 'blog.delete'|trans }}">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                      </form>
                    </div>
                  {% endif %}
                </div>
              </div>
            {% else %}
              <p class="text-center text-muted">{{ 'blog.no_comments'|trans }}</p>
            {% endfor %}
          </div>

          {# Formulaire d'ajout de commentaire #}
          <div class="border-top p-3 d-flex align-items-center">
            <img src="{{ app.user.imageUrl ? asset(app.user.imageUrl) : asset('img/screen/user.png') }}" class="rounded-circle me-2" style="width:32px;height:32px;object-fit:cover;">
            
            <div id="comment-errors" class="text-danger mb-2" style="display: none;"></div>
            
            <form 
              action="{{ path('app_comment_new', {postId: post.id}) }}" 
              method="post" 
              class="js-add-comment-form w-100 d-flex"
              data-post-id="{{ post.id }}"
            >
              <input type="hidden" name="_token" value="{{ csrf_token('comment' ~ post.id) }}">
              <input 
                type="text" 
                name="content" 
                class="form-control form-control-sm me-2" 
                placeholder="{{ 'blog.add_comment'|trans }}..." 
                required
              >
              <button type="submit" class="btn btn-primary btn-sm">{{ 'blog.add'|trans }}</button>
            </form>
          </div>
        </div>

      </div>
      
      {# Actions post #}
      <div class="mt-3 d-flex gap-2 justify-content-center">
        <a href="{{ path('app_post_index') }}" class="btn btn-secondary">
          <i class="fas fa-arrow-left me-1"></i> {{ 'blog.back_to_list'|trans }}
        </a>
        
        {% if post.user == app.user %}
          <a href="{{ path('app_post_edit', {id: post.id}) }}" class="btn btn-primary">
            <i class="fas fa-edit me-1"></i> {{ 'blog.edit'|trans }}
          </a>
          
          <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deletePostModal">
            <i class="fas fa-trash-alt me-1"></i> {{ 'blog.delete'|trans }}
          </button>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{# Modal suppression du post #}
{% if post.user == app.user %}
<div class="modal fade" id="deletePostModal" tabindex="-1" aria-labelledby="deletePostModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deletePostModalLabel">{{ 'blog.delete_post_confirmation'|trans }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>{{ 'blog.delete_post_warning'|trans }}</p>
        <p class="fw-bold">{{ post.title }}</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ 'blog.cancel'|trans }}</button>
        <form action="{{ path('app_post_delete', {id: post.id}) }}" method="post">
          <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ post.id) }}">
          <button type="submit" class="btn btn-danger">{{ 'blog.confirm_delete'|trans }}</button>
        </form>
      </div>
    </div>
  </div>
</div>
{% endif %}
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Gestion des formulaires de commentaires via AJAX
    const commentForm = document.querySelector('.js-add-comment-form');
    if (commentForm) {
      commentForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const postId = this.dataset.postId;
        const commentInput = this.querySelector('input[name="content"]');
        const errorContainer = document.getElementById('comment-errors');
        
        fetch(this.action, {
          method: 'POST',
          body: new FormData(this),
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Recharger la page pour afficher le nouveau commentaire
            window.location.reload();
          } else {
            // Afficher les erreurs
            errorContainer.textContent = data.error || 'Une erreur est survenue.';
            errorContainer.style.display = 'block';
          }
        })
        .catch(error => {
          errorContainer.textContent = 'Une erreur est survenue lors de l\'envoi du commentaire.';
          errorContainer.style.display = 'block';
        });
      });
    }
    
    // Attacher des événements aux boutons d'édition des commentaires
    document.querySelectorAll('.js-edit-comment-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const commentContainer = this.closest('.comment-container');
        const commentContent = commentContainer.querySelector('.comment-content');
        const content = commentContent.textContent.trim();
        
        // Masquer les boutons d'action
        const actionsDiv = commentContainer.querySelector('.comment-actions');
        if (actionsDiv) {
          actionsDiv.style.display = 'none';
        }
        
        // Créer le formulaire d'édition
        const editForm = document.createElement('form');
        editForm.className = 'edit-comment-form mt-2';
        editForm.innerHTML = `
          <div class="input-group">
            <input type="text" class="form-control form-control-sm" value="${content}" required>
            <button type="submit" class="btn btn-primary btn-sm">{{ 'blog.save'|trans }}</button>
            <button type="button" class="btn btn-secondary btn-sm cancel-edit">{{ 'blog.cancel'|trans }}</button>
          </div>
        `;
        
        // Masquer le contenu et insérer le formulaire
        commentContent.style.display = 'none';
        commentContent.insertAdjacentElement('afterend', editForm);
        
        // Focus sur l'input
        const input = editForm.querySelector('input');
        input.focus();
        input.setSelectionRange(input.value.length, input.value.length);
        
        // Annulation de l'édition
        editForm.querySelector('.cancel-edit').addEventListener('click', () => {
          editForm.remove();
          commentContent.style.display = '';
          if (actionsDiv) {
            actionsDiv.style.display = '';
          }
        });
        
        // Soumission du formulaire d'édition
        editForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const newContent = this.querySelector('input').value.trim();
          const commentId = btn.dataset.commentId;
          const csrfToken = btn.dataset.token;
          
          fetch(`/comment/${commentId}/edit`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
              content: newContent,
              _token: csrfToken
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Mettre à jour le contenu du commentaire
              commentContent.textContent = data.content;
              
              // Afficher un message de succès
              const alertDiv = document.createElement('div');
              alertDiv.className = 'alert alert-success';
              alertDiv.textContent = '{{ 'blog.comment_updated'|trans }}';
              document.body.appendChild(alertDiv);
              
              setTimeout(() => {
                alertDiv.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => alertDiv.remove(), 300);
              }, 3000);
            } else {
              // Afficher un message d'erreur
              const alertDiv = document.createElement('div');
              alertDiv.className = 'alert alert-error';
              alertDiv.textContent = data.error || '{{ 'blog.update_error'|trans }}';
              document.body.appendChild(alertDiv);
              
              setTimeout(() => {
                alertDiv.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => alertDiv.remove(), 300);
              }, 3000);
            }
            
            // Nettoyer l'interface
            editForm.remove();
            commentContent.style.display = '';
            if (actionsDiv) {
              actionsDiv.style.display = '';
            }
          })
          .catch(error => {
            console.error('Error:', error);
            // Afficher un message d'erreur
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-error';
            alertDiv.textContent = '{{ 'blog.connection_error'|trans }}';
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
              alertDiv.style.animation = 'slideOut 0.3s ease-in';
              setTimeout(() => alertDiv.remove(), 300);
            }, 3000);
            
            // Nettoyer l'interface
            editForm.remove();
            commentContent.style.display = '';
            if (actionsDiv) {
              actionsDiv.style.display = '';
            }
          });
        });
      });
    });
    
    // Gestion des suppressions de commentaires via AJAX
    document.querySelectorAll('.js-delete-comment-form').forEach(form => {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (confirm('{{ 'blog.delete_comment_confirmation'|trans }}')) {
          fetch(this.action, {
            method: 'POST',
            body: new FormData(this),
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Supprimer l'élément du DOM
              const commentElement = this.closest('.d-flex.align-items-start.mb-3');
              commentElement.remove();
              
              // Afficher un message de succès
              const alertDiv = document.createElement('div');
              alertDiv.className = 'alert alert-success';
              alertDiv.textContent = '{{ 'blog.comment_deleted'|trans }}';
              document.body.appendChild(alertDiv);
              
              setTimeout(() => {
                alertDiv.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => alertDiv.remove(), 300);
              }, 3000);
            } else {
              // Afficher un message d'erreur
              const alertDiv = document.createElement('div');
              alertDiv.className = 'alert alert-error';
              alertDiv.textContent = data.error || '{{ 'blog.delete_error'|trans }}';
              document.body.appendChild(alertDiv);
              
              setTimeout(() => {
                alertDiv.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => alertDiv.remove(), 300);
              }, 3000);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            // Afficher un message d'erreur
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-error';
            alertDiv.textContent = '{{ 'blog.connection_error'|trans }}';
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
              alertDiv.style.animation = 'slideOut 0.3s ease-in';
              setTimeout(() => alertDiv.remove(), 300);
            }, 3000);
          });
        }
      });
    });
  });
</script>
{% endblock %}
