<<<<<<< HEAD
{% extends 'base.html.twig' %}

{% block title %}Modifier l'utilisateur{% endblock %}

{% block body %}
    <h1>Modifier l'utilisateur</h1>

    {{ form_start(form) }}
        {{ form_row(form.nom) }}
        {{ form_row(form.prenom) }}
        {{ form_row(form.email) }}
        {{ form_row(form.password) }}
        {{ form_row(form.role) }}
        {{ form_row(form.specialite) }}
        {{ form_row(form.imageUrl) }}
        {{ form_row(form.dateNaissance) }}
        
        <button type="submit">Enregistrer les modifications</button>
    {{ form_end(form) }}

    <a href="{{ path('user_index') }}">Retour à la liste des utilisateurs</a>
{% endblock %}
=======
{% extends 'admin/homepageadmin.html.twig' %}

{% block title %}Modifier un utilisateur{% endblock %}

{% block body %}
    <div class="container-fluid px-4 py-5">
        <h1 class="fw-bold mb-4 text-primary"><i class="fas fa-user-edit me-2"></i>Modifier un utilisateur</h1>
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb bg-light p-2 rounded shadow-sm">
                <li class="breadcrumb-item"><a href="{{ path('app_admin') }}" class="text-decoration-none">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="{{ path('user_index') }}" class="text-decoration-none">Utilisateurs</a></li>
                <li class="breadcrumb-item active" aria-current="page">Modifier</li>
            </ol>
        </nav>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label == 'success' ? 'success' : 'danger' }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        <div class="card shadow-lg border-0 rounded-4">
            <div class="card-header bg-gradient-primary text-white py-3 rounded-top-4">
                <h5 class="mb-0"><i class="fas fa-user-edit me-2"></i>Modifier {{ user.prenom }} {{ user.nom }}</h5>
            </div>
            <div class="card-body p-5">
                {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': ''}}) }}
                
                <div class="row g-4 mb-4">
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            {{ form_label(form.nom, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-user"></i></span>
                                {{ form_widget(form.nom) }}
                            </div>
                            <div class="invalid-feedback mt-1"></div>
                            {{ form_errors(form.nom) }}
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            {{ form_label(form.prenom, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-user"></i></span>
                                {{ form_widget(form.prenom) }}
                            </div>
                            <div class="invalid-feedback mt-1"></div>
                            {{ form_errors(form.prenom) }}
                        </div>
                    </div>
                </div>

                <div class="row g-4 mb-4">
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            <label class="form-label fw-semibold">Email</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-envelope"></i></span>
                                <input type="text" class="form-control" value="{{ user.email }}" readonly>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            {{ form_label(form.dateNaissance, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-calendar-alt"></i></span>
                                {{ form_widget(form.dateNaissance) }}
                            </div>
                            <div class="invalid-feedback mt-1"></div>
                            {{ form_errors(form.dateNaissance) }}
                        </div>
                    </div>
                </div>

                <div class="row g-4 mb-4">
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            <label class="form-label fw-semibold">Mot de passe actuel</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-lock"></i></span>
                                <input type="text" class="form-control" value="{{ user.password|slice(0, 20) }}..." readonly>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group position-relative">
                            {{ form_label(form.role, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-users-cog"></i></span>
                                {{ form_widget(form.role) }}
                            </div>
                            <div class="invalid-feedback mt-1"></div>
                            {{ form_errors(form.role) }}
                        </div>
                    </div>
                </div>

                <div class="form-group mb-4" id="specialite_container" style="display: {% if form.role.vars.data == 'entraineur' %}block{% else %}none{% endif %};">
                    {{ form_label(form.specialite, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                    <div class="input-group">
                        <span class="input-group-text bg-light"><i class="fas fa-tools"></i></span>
                        {{ form_widget(form.specialite) }}
                    </div>
                    <div class="invalid-feedback mt-1"></div>
                    {{ form_errors(form.specialite) }}
                </div>

                <div class="form-group mb-4">
                    {{ form_label(form.imageUrl, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
                    {% if user.imageUrl %}
                        <div class="mb-2">
                            <img src="{{ asset('uploads/users/' ~ user.imageUrl) }}"
                                 class="rounded shadow-sm"
                                 style="max-width: 200px;"
                                 alt="Image actuelle">
                        </div>
                    {% endif %}
                    <div class="input-group">
                        <span class="input-group-text bg-light"><i class="fas fa-image"></i></span>
                        {{ form_widget(form.imageUrl) }}
                    </div>
                    <div class="invalid-feedback mt-1"></div>
                    {{ form_errors(form.imageUrl) }}
                    <div class="mt-3">
                        <img id="image-preview" class="rounded shadow-sm" style="max-width: 200px; display: none;" alt="Aperçu de la nouvelle image">
                    </div>
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <a href="{{ path('user_index') }}" class="btn btn-outline-secondary btn-lg rounded-pill">
                        <i class="fas fa-times me-2"></i>Annuler
                    </a>
                    <button type="submit" class="btn btn-primary btn-lg rounded-pill">
                        <i class="fas fa-save me-2"></i>Enregistrer
                    </button>
                </div>

                {{ form_end(form) }}
            </div>
        </div>
    </div>

    <style>
        .bg-gradient-primary {
            background: linear-gradient(45deg, #007bff, #00bcd4);
        }
        .form-control.is-invalid, .form-select.is-invalid {
            border-color: #dc3545;
            background-image: none;
        }
        .invalid-feedback {
            color: #dc3545;
            font-size: 0.875rem;
            display: block;
        }
        .input-group .form-control.is-invalid {
            z-index: 0;
        }
        .card {
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .btn-lg {
            padding: 0.75rem 1.5rem;
        }
        .form-group .invalid-feedback:empty {
            display: none;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.querySelector('.needs-validation');
            const inputs = form.querySelectorAll('[data-validate="true"]');
            const specialiteContainer = document.querySelector('#specialite_container');
            const roleSelect = document.querySelector('#user_role');
            const imageInput = document.querySelector('#user_imageUrl');
            const imagePreview = document.querySelector('#image-preview');

            // Toggle specialite field
            const toggleSpecialite = () => {
                const isEntraineur = roleSelect.value === 'entraineur';
                specialiteContainer.style.display = isEntraineur ? 'block' : 'none';
                const specialiteInput = document.querySelector('#specialite_field');
                if (specialiteInput) specialiteInput.required = isEntraineur;
                if (!isEntraineur && specialiteInput) {
                    specialiteInput.classList.remove('is-invalid');
                    specialiteInput.closest('.form-group').querySelector('.invalid-feedback').textContent = '';
                }
            };

            roleSelect.addEventListener('change', () => {
                toggleSpecialite();
                validateField(roleSelect);
            });
            toggleSpecialite();

            // Validation function
            const validateField = async (input) => {
                const errorElement = input.closest('.form-group').querySelector('.invalid-feedback');
                const name = input.id.replace('user_', '');
                errorElement.textContent = '';

                if (name === 'nom' || name === 'prenom') {
                    if (!input.value.trim()) {
                        input.classList.add('is-invalid');
                        errorElement.textContent = `Le ${name} est requis.`;
                    } else if (input.value.length > 50) {
                        input.classList.add('is-invalid');
                        errorElement.textContent = `Le ${name} ne peut dépasser 50 caractères.`;
                    } else {
                        input.classList.remove('is-invalid');
                    }
                } else if (name === 'dateNaissance') {
                    if (!input.value) {
                        input.classList.add('is-invalid');
                        errorElement.textContent = 'La date de naissance est requise.';
                    } else {
                        const birthDate = new Date(input.value);
                        const today = new Date();
                        let age = today.getFullYear() - birthDate.getFullYear();
                        const monthDiff = today.getMonth() - birthDate.getMonth();
                        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                            age--;
                        }
                        if (age < 12) {
                            input.classList.add('is-invalid');
                            errorElement.textContent = 'Vous devez avoir au moins 12 ans.';
                        } else {
                            input.classList.remove('is-invalid');
                        }
                    }
                } else if (name === 'role') {
                    if (!input.value) {
                        input.classList.add('is-invalid');
                        errorElement.textContent = 'Le rôle est requis.';
                    } else {
                        input.classList.remove('is-invalid');
                    }
                } else if (name === 'specialite_field') {
                    if (roleSelect.value === 'entraineur') {
                        if (!input.value.trim()) {
                            input.classList.add('is-invalid');
                            errorElement.textContent = 'La spécialité est requise pour les entraîneurs.';
                        } else if (input.value.length > 100) {
                            input.classList.add('is-invalid');
                            errorElement.textContent = 'La spécialité ne peut dépasser 100 caractères.';
                        } else {
                            input.classList.remove('is-invalid');
                        }
                    } else {
                        input.classList.remove('is-invalid');
                    }
                } else if (name === 'imageUrl') {
                    const file = input.files[0];
                    if (file) {
                        const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
                        if (!validTypes.includes(file.type)) {
                            input.classList.add('is-invalid');
                            errorElement.textContent = 'Veuillez uploader une image valide (JPEG, PNG, WebP).';
                        } else if (file.size > 2 * 1024 * 1024) {
                            input.classList.add('is-invalid');
                            errorElement.textContent = 'L\'image ne doit pas dépasser 2 Mo.';
                        } else {
                            input.classList.remove('is-invalid');
                        }
                    } else {
                        input.classList.remove('is-invalid');
                    }
                }
            };

            // Validate on blur and input
            inputs.forEach(input => {
                input.addEventListener('blur', () => validateField(input));
                if (input.type !== 'file') {
                    input.addEventListener('input', () => validateField(input));
                } else {
                    input.addEventListener('change', () => validateField(input));
                }
            });

            // Image preview
            imageInput.addEventListener('change', () => {
                validateField(imageInput);
                const file = imageInput.files[0];
                if (file && !imageInput.classList.contains('is-invalid')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        imagePreview.src = e.target.result;
                        imagePreview.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                } else {
                    imagePreview.src = '';
                    imagePreview.style.display = 'none';
                }
            });

            // Form submission
            form.addEventListener('submit', async (e) => {
                let hasErrors = false;
                for (const input of inputs) {
                    await validateField(input);
                    if (input.classList.contains('is-invalid')) {
                        hasErrors = true;
                    }
                }
                if (hasErrors) {
                    e.preventDefault();
                    const firstError = form.querySelector('.is-invalid');
                    if (firstError) {
                        firstError.focus();
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
        });
    </script>
{% endblock %}
>>>>>>> 1e2a521f379c042fb627b82253dcd3e5a8f8a1fc
