{% extends 'sportif/base.html.twig' %}

{% block title %}Recommandations Personnalisées{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-color:rgb(208, 107, 29);
            --secondary-color:rgb(206, 92, 10);
            --accent-color:rgb(9, 3, 6);
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --gray-color: #6c757d;
            --success-color: #4cc9f0;
            --border-radius: 12px;
            --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        /* Hero Section */
        .recommendations-hero {
            background: linear-gradient(135deg, rgba(168, 81, 20, 0.9) 0%, rgba(0, 0, 0, 0.9) 100%), 
                        url('{{ asset("img/recommendation-bg.jpg") }}');
            background-size: cover;
            background-position: center;
            padding: 120px 0 80px;
            color: white;
            position: relative;
            overflow: hidden;
        }

        .recommendations-hero::before {
            content: "";
            position: absolute;
            bottom: -50px;
            left: 0;
            right: 0;
            height: 100px;
            background: var(--light-color);
            transform: skewY(-3deg);
            z-index: 1;
        }

        /* Section Header */
        .section-header {
            position: relative;
            text-align: center;
            margin-bottom: 60px;
            z-index: 2;
        }

        .section-title {
            font-size: 2.8rem;
            font-weight: 800;
            margin-bottom: 20px;
            position: relative;
            display: inline-block;
        }

        .section-title::after {
            content: "";
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: var(--accent-color);
            border-radius: 2px;
        }

        .section-subtitle {
            font-size: 1.2rem;
            max-width: 700px;
            margin: 0 auto;
            opacity: 0.9;
            font-weight: 300;
        }

        /* Cards Grid */
        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 30px;
            margin-top: 50px;
        }

        /* Course Card */
        .course-card {
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .course-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);
        }

        .course-media {
            position: relative;
            height: 200px;
            overflow: hidden;
        }

        .course-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }

        .course-card:hover .course-image {
            transform: scale(1.05);
        }

        .course-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: var(--accent-color);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.8rem;
            z-index: 2;
            box-shadow: 0 3px 10px rgba(247, 37, 133, 0.3);
        }

        .course-content {
            padding: 25px;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .course-title {
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 15px;
            color: var(--dark-color);
        }

        .course-description {
            color: var(--gray-color);
            margin-bottom: 20px;
            font-size: 0.95rem;
            flex: 1;
        }

        .course-meta {
            display: flex;
            justify-content: space-between;
            border-top: 1px solid #eee;
            padding-top: 15px;
            margin-top: auto;
        }

        .meta-item {
            display: flex;
            align-items: center;
            color: var(--gray-color);
            font-size: 0.85rem;
        }

        .meta-item i {
            margin-right: 5px;
            color: var(--primary-color);
            font-size: 1rem;
        }

        /* Loading State */
        .loading-container {
            min-height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            text-align: center;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid rgba(67, 97, 238, 0.1);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }

        .loading-text {
            font-size: 1.2rem;
            color: var(--gray-color);
            font-weight: 500;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Results Section */
        .results-header {
            text-align: center;
            margin-bottom: 50px;
        }

        .results-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 15px;
            position: relative;
            display: inline-block;
        }

        .results-title::after {
            content: "";
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: var(--accent-color);
            border-radius: 2px;
        }

        .results-subtitle {
            color: var(--gray-color);
            font-size: 1.1rem;
            max-width: 600px;
            margin: 0 auto;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
        }

        .empty-icon {
            font-size: 4rem;
            color: var(--gray-color);
            opacity: 0.3;
            margin-bottom: 20px;
        }

        .empty-text {
            font-size: 1.2rem;
            color: var(--gray-color);
            margin-bottom: 30px;
        }

        /* Responsive Adjustments */
        @media (max-width: 992px) {
            .section-title {
                font-size: 2.4rem;
            }
        }

        @media (max-width: 768px) {
            .section-title {
                font-size: 2rem;
            }
            
            .section-subtitle {
                font-size: 1rem;
            }
            
            .courses-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
        }

        /* Animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.6s ease forwards;
        }

        .delay-1 { animation-delay: 0.2s; }
        .delay-2 { animation-delay: 0.4s; }
        .delay-3 { animation-delay: 0.6s; }
    </style>
{% endblock %}

{% block body %}
    <!-- Hero Section -->
    <section class="recommendations-hero">
        <div class="container">
            <div class="section-header">
                <h1 class="section-title">Recommandations Personnalisées</h1>
                <p class="section-subtitle">
                    Découvrez les cours spécialement adaptés à votre profil et vos objectifs sportifs
                </p>
            </div>
        </div>
    </section>

    <!-- Recommendations Section -->
    <section class="py-5 bg-light">
        <div class="container py-5">
            <div id="prediction" class="loading-container">
                <div class="loading-spinner"></div>
                <p class="loading-text">Analyse de votre profil en cours...</p>
            </div>
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script>
        // Fonction pour générer des outputs d'entraînement
        function generateTrainingOutputs(numExamples, numClasses) {
            const outputs = [];
            for (let i = 0; i < numExamples; i++) {
                const output = new Array(numClasses).fill(0);
                output[i % numClasses] = 1;
                outputs.push(output);
            }
            return tf.tensor2d(outputs);
        }

        // Mapping des objectifs vers des numéros
        function mapObjectifToNumber(objectif) {
            const objectifMap = {
                'Perte de poids': 1,
                'Prise de masse': 2,
                'Endurance': 3,
                'Relaxation': 4
            };
            return objectifMap[objectif] || 1;
        }

        // Récupération des données utilisateur
        async function fetchUserData(userId) {
            try {
                const response = await fetch(`{{ url('api_user', { id: userId }) }}`);
                if (!response.ok) throw new Error('Erreur lors de la récupération des données utilisateur');
                const userData = await response.json();

                // Normalisation des données
                userData.poids = parseFloat(userData.poids) || 70;
                userData.taille = parseFloat(userData.taille) || 1.75;
                userData.age = parseInt(userData.age, 10) || 30;
                userData.objectif = mapObjectifToNumber(userData.objectif) || 1;
                userData.sexe = userData.sexe === 'Homme' ? 1 : userData.sexe === 'Femme' ? 0 : 0.5;

                console.log("Données utilisateur traitées :", userData);
                return userData;
            } catch (error) {
                console.error("Erreur lors de la récupération des données utilisateur :", error);
                return null;
            }
        }

        // Récupération des cours disponibles
        async function fetchCourses() {
            try {
                const response = await fetch('{{ url('api_courses') }}');
                if (!response.ok) throw new Error('Erreur lors de la récupération des cours');
                const courses = await response.json();

                // Filtrage des cours valides
                const validCourses = courses.filter(course =>
                    course.title && course.description && course.heurDebut && course.heurFin && course.objectif
                );

                if (validCourses.length === 0) {
                    console.error("Aucun cours valide trouvé.");
                    return [];
                }

                console.log("Cours valides reçus :", validCourses);
                return validCourses;
            } catch (error) {
                console.error("Erreur lors de la récupération des cours :", error);
                return [];
            }
        }

        // Entraînement du modèle
        async function trainModel(userData, courses) {
            if (!userData || courses.length === 0) {
                console.error("Données manquantes pour l'entraînement du modèle.");
                return null;
            }

            const inputShape = 5;
            const outputShape = courses.length;

            // Création du modèle
            const model = tf.sequential({
                layers: [
                    tf.layers.dense({ inputShape: [inputShape], units: 16, activation: 'relu' }),
                    tf.layers.dense({ units: 8, activation: 'relu' }),
                    tf.layers.dense({ units: outputShape, activation: 'softmax' })
                ]
            });

            // Compilation du modèle
            model.compile({
                optimizer: tf.train.adam(0.01),
                loss: 'categoricalCrossentropy',
                metrics: ['accuracy']
            });

            // Données d'entraînement
            const trainingInputs = tf.tensor2d([
                [75, 1.80, 25, 1, 1],  // Homme, 75kg, 1.80m, 25 ans, Perte de poids
                [85, 1.75, 30, 1, 2],  // Homme, 85kg, 1.75m, 30 ans, Prise de masse
                [60, 1.65, 20, 0, 3],  // Femme, 60kg, 1.65m, 20 ans, Endurance
                [70, 1.70, 22, 1, 4],  // Homme, 70kg, 1.70m, 22 ans, Relaxation
                [80, 1.78, 27, 0, 1],   // Femme, 80kg, 1.78m, 27 ans, Perte de poids
                [65, 1.60, 35, 0, 3],   // Femme, 65kg, 1.60m, 35 ans, Endurance
                [90, 1.85, 40, 1, 2],  // Homme, 90kg, 1.85m, 40 ans, Prise de masse
                [72, 1.72, 28, 0.5, 4]  // Autre, 72kg, 1.72m, 28 ans, Relaxation
            ]);

            const numExamples = 8;
            const trainingOutputs = generateTrainingOutputs(numExamples, outputShape);

            // Entraînement
            await model.fit(trainingInputs, trainingOutputs, { 
                epochs: 150,
                batchSize: 4,
                verbose: 0
            });

            return model;
        }

        // Obtention des meilleures recommandations
        function getTopNIndices(array, n) {
            return Array.from(array)
                .map((value, index) => ({ value, index }))
                .sort((a, b) => b.value - a.value)
                .slice(0, n)
                .map(item => item.index);
        }

        // Fonction pour générer un nombre aléatoire entre min et max
        function getRandomImageIndex(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        // Fonction principale de prédiction
        async function predict(userId, numberOfRecommendations = 3) {
            try {
                console.log("Début de la prédiction...");

                // Récupération des données
                const [userData, courses] = await Promise.all([
                    fetchUserData(userId),
                    fetchCourses()
                ]);

                // Vérification des données
                if (!userData || courses.length === 0) {
                    showError("Données insuffisantes pour générer des recommandations");
                    return;
                }

                if (isInvalidUserData(userData)) {
                    console.error("Données utilisateur invalides :", userData);
                    showError("Votre profil contient des informations incomplètes");
                    return;
                }

                // Entraînement du modèle
                const model = await trainModel(userData, courses);
                if (!model) {
                    showError("Erreur lors de l'analyse des données");
                    return;
                }

                // Préparation des données d'entrée
                const input = tf.tensor2d([[
                    userData.poids,
                    userData.taille,
                    userData.age,
                    userData.sexe,
                    userData.objectif
                ]]);

                // Prédiction
                const output = model.predict(input);
                const prediction = await output.data();
                
                if (!prediction || prediction.some(isNaN)) {
                    console.error("Prédiction invalide :", prediction);
                    showError("Erreur dans l'analyse des données");
                    return;
                }

                // Affichage des résultats
                displayRecommendations(prediction, courses, numberOfRecommendations);
                
            } catch (error) {
                console.error("Erreur lors de la prédiction :", error);
                showError("Une erreur est survenue. Veuillez réessayer.");
            }
        }

        // Vérification des données utilisateur
        function isInvalidUserData(userData) {
            return isNaN(userData.poids) || 
                   isNaN(userData.taille) || 
                   isNaN(userData.age) || 
                   isNaN(userData.objectif);
        }

        // Affichage des erreurs
        function showError(message) {
            document.getElementById("prediction").innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <h4 class="empty-text">${message}</h4>
                    <button class="btn btn-primary" onclick="window.location.reload()">
                        <i class="fas fa-sync-alt mr-2"></i>Réessayer
                    </button>
                </div>
            `;
        }

        // Affichage des recommandations
        function displayRecommendations(prediction, courses, numberOfRecommendations) {
            const topNIndices = getTopNIndices(prediction, Math.min(numberOfRecommendations, courses.length));
            
            let recommendationsHTML = `
                <div class="results-header">
                    <h2 class="results-title">Nos recommandations pour vous</h2>
                    <p class="results-subtitle">
                        Basé sur votre profil et vos objectifs personnels
                    </p>
                </div>
                <div class="courses-grid">
            `;

            topNIndices.forEach((index, i) => {
                const course = courses[index];
                const randomImageIndex = getRandomImageIndex(1, 6); // Génère un nombre entre 1 et 6
                const delayClass = `delay-${i+1}`;
                
                recommendationsHTML += `
                    <div class="course-card fade-in ${delayClass}">
                        <div class="course-media">
                            <img src="{{ asset('img/classes/class-') }}${randomImageIndex}.jpg" alt="${course.title}" class="course-image">
                            <span class="course-badge">Recommandé</span>
                        </div>
                        <div class="course-content">
                            <h3 class="course-title">${course.title}</h3>
                            <p class="course-description">${course.description}</p>
                            
                            <div class="course-meta">
                                <span class="meta-item">
                                    <i class="far fa-clock"></i>
                                    ${course.heurDebut} - ${course.heurFin}
                                </span>
                                <span class="meta-item">
                                    <i class="fas fa-bullseye"></i>
                                    ${course.objectif}
                                </span>
                            </div>
                        </div>
                    </div>
                `;
            });

            recommendationsHTML += `</div>`;
            document.getElementById("prediction").innerHTML = recommendationsHTML;
        }

        // Lancement de la prédiction au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            const userId = {{ userId|json_encode|raw }};
            predict(userId, 3);
        });
    </script>
{% endblock %}