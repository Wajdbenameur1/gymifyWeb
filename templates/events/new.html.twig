{% extends 'responsable/homepage_responsable.html.twig' %}

{% block title %}{{ page_title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('app') }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <style>
        .navbar-form.nav-search { display: none !important; }
        .navbar-header { justify-content: flex-end !important; }
        .event-type-card {
            transition: all 0.3s ease;
            min-height: 150px;
        }
        .event-type-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        .btn-check:checked + .event-type-card {
            background: linear-gradient(135deg, rgb(35, 132, 147), rgb(124, 148, 200));
            color: white;
            border-color: transparent;
            box-shadow: 0 5px 20px rgba(118, 75, 162, 0.3);
        }
        .btn-check:checked + .event-type-card .text-muted {
            color: rgba(255, 255, 255, 0.8) !important;
        }
        .event-icon {
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
        }
        .modern-form .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
        }
        .border-dashed { border: 2px dashed #dee2e6; }
        .image-upload-container:hover .border-dashed { border-color: #3a7bd5; }
        .image-preview-container {
            position: relative;
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #imagePreview {
            max-width: 100%;
            max-height: 300px;
            object-fit: contain;
        }
        .is-invalid {
            border: 1px solid #dc3545 !important;
        }
        .invalid-feedback {
            color: #dc3545;
            font-size: 0.875em;
        }
        .border-danger {
            border-color: #dc3545 !important;
        }
        #submitBtn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        #map {
            width: 100%;
            height: 400px;
            margin-top: 10px;
            border-radius: 8px;
            z-index: 1;
        }
        .leaflet-container {
            height: 100%;
            width: 100%;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
        <div>
            <h3 class="fw-bold mb-3">{{ page_title }}</h3>
            <h6 class="op-7 mb-2">Create a new event</h6>
        </div>
    </div>

    {% for message in app.flashes('success') %}
        <div class="alert alert-success">{{ message }}</div>
    {% endfor %}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">{{ message }}</div>
    {% endfor %}

    <div class="card card-round shadow-lg">
        <div class="card-body p-5">
            {{ form_start(form, {'attr': {'enctype': 'multipart/form-data', 'class': 'modern-form', 'id': 'eventForm'}}) }}

                <!-- Event Name -->
                <div class="form-group mb-4">
                    <label for="events_nom" class="form-label fw-bold text-muted small">EVENT NAME</label>
                    {{ form_widget(form.nom, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'placeholder': 'Enter event name', 'required': 'required'}}) }}
                    <div class="invalid-feedback">The event name is required.</div>
                </div>

                <!-- Image Upload -->
                <div class="form-group mb-4">
                    <label class="form-label fw-bold text-muted small">EVENT IMAGE</label>
                    <div class="image-upload-container">
                        <div class="image-preview-container text-center mb-3 position-relative" style="min-height: 200px;">
                            <img id="imagePreview" src="" class="img-fluid rounded-3 shadow-sm mx-auto d-block" style="max-height: 300px; object-fit: contain; display: none;">
                            <div id="placeholderText" class="position-absolute top-50 start-50 translate-middle w-100 py-5 border-2 border-dashed rounded-3 bg-light">
                                <i class="fas fa-image fa-3x text-muted mb-3 d-block"></i>
                                <p class="text-muted mb-0">No image selected</p>
                            </div>
                        </div>
                        <div class="d-flex flex-column flex-md-row gap-3">
                            <div class="flex-grow-1">
                                <input type="file" class="form-control d-none" id="eventImage" name="events[imageFile]" accept="image/*" required>
                                <label for="eventImage" class="btn btn-outline-primary w-100 py-3 rounded-3">
                                    <i class="fas fa-cloud-upload-alt me-2"></i> Choose Image
                                </label>
                            </div>
                            <button type="button" id="removeImageBtn" class="btn btn-outline-danger py-3 rounded-3" style="display: none;">
                                <i class="fas fa-trash-alt me-2"></i> Remove
                            </button>
                        </div>
                        <div class="invalid-feedback">Please select an image.</div>
                        <small class="text-muted d-block mt-2">Recommended size: 1200x800px (JPG, PNG or WEBP)</small>
                    </div>
                </div>

                <!-- Date -->
                <div class="form-group mb-4">
                    <label for="events_date" class="form-label fw-bold text-muted small">DATE</label>
                    {{ form_widget(form.date, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'required': 'required'}}) }}
                    <div class="invalid-feedback">The date is required.</div>
                </div>

                <!-- Start and End Time -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <label for="events_heure_debut" class="form-label fw-bold text-muted small">START TIME</label>
                        {{ form_widget(form.heure_debut, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'required': 'required'}}) }}
                        <div class="invalid-feedback">The start time is required.</div>
                    </div>
                    <div class="col-md-6">
                        <label for="events_heure_fin" class="form-label fw-bold text-muted small">END TIME</label>
                        {{ form_widget(form.heure_fin, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'required': 'required'}}) }}
                        <div class="invalid-feedback">The end time is required.</div>
                    </div>
                </div>

                <!-- Event Type Selector -->
                <div class="form-group mb-4">
                    <label for="events_type" class="form-label fw-bold text-muted small">EVENT TYPE</label>
                    {{ form_widget(form.type, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'required': 'required'}}) }}
                    <div class="invalid-feedback">Please select an event type.</div>
                </div>

                <!-- Reward Selector -->
                <div class="form-group mb-4">
                    <label for="events_reward" class="form-label fw-bold text-muted small">REWARD</label>
                    {{ form_widget(form.reward, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'required': 'required'}}) }}
                    <div class="invalid-feedback">Please select a reward.</div>
                </div>

                <!-- Description -->
                <div class="form-group mb-4">
                    <label for="events_description" class="form-label fw-bold text-muted small">DESCRIPTION</label>
                    {{ form_widget(form.description, {'attr': {'class': 'form-control border-0 bg-light rounded-3', 'rows': '4', 'placeholder': 'Describe the event...', 'required': 'required'}}) }}
                    <div class="invalid-feedback">The description is required.</div>
                </div>

                <!-- Location -->
                <div class="form-group mb-4">
                    <label for="events_lieu" class="form-label fw-bold text-muted small">LOCATION</label>
                    <div class="input-group">
                        {{ form_widget(form.lieu, {'attr': {'class': 'form-control form-control-lg border-0 bg-light rounded-3', 'placeholder': 'Enter the location', 'required': 'required'}}) }}
                        <button type="button" id="searchLocationBtn" class="btn btn-outline-primary rounded-3">
                            <i class="fas fa-search me-2"></i> Search
                        </button>
                    </div>
                    <div class="invalid-feedback">The location is required.</div>
                    <!-- Map Container -->
                    <div id="map"></div>
                    <!-- Hidden fields for latitude and longitude -->
                    {{ form_widget(form.latitude, {'attr': {'id': 'events_latitude'}}) }}
                    {{ form_widget(form.longitude, {'attr': {'id': 'events_longitude'}}) }}
                </div>

                <!-- CSRF Token -->
                {{ form_row(form._token) }}

                <!-- Buttons -->
                <div class="d-flex gap-2 mt-5 justify-content-end">
                    <a href="{{ path('app_events_index') }}" class="btn btn-outline-secondary btn-lg rounded-pill py-3 fw-bold" id="cancelBtn">
                        <i class="fas fa-times me-2"></i> Cancel
                    </a>
                    <button type="submit" id="submitBtn" class="btn btn-primary btn-lg rounded-pill py-3 fw-bold">
                        <i class="fas fa-save me-2"></i> Save
                    </button>
                </div>

            {{ form_end(form, {'render_rest': false}) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('app') }}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM fully loaded and parsed');

        // DOM elements
        const imageInput = document.getElementById('eventImage');
        const imagePreview = document.getElementById('imagePreview');
        const placeholderText = document.getElementById('placeholderText');
        const removeImageBtn = document.getElementById('removeImageBtn');
        const form = document.getElementById('eventForm');
        const submitBtn = document.getElementById('submitBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const locationInput = document.getElementById('events_lieu'); // Updated ID
        const searchLocationBtn = document.getElementById('searchLocationBtn');
        const mapContainer = document.getElementById('map');
        const latitudeInput = document.getElementById('events_latitude'); // Updated ID
        const longitudeInput = document.getElementById('events_longitude'); // Updated ID

        // Check if critical elements exist
        console.log('Checking DOM elements:', {
            imageInput: !!imageInput,
            imagePreview: !!imagePreview,
            placeholderText: !!placeholderText,
            removeImageBtn: !!removeImageBtn,
            form: !!form,
            submitBtn: !!submitBtn,
            cancelBtn: !!cancelBtn,
            locationInput: !!locationInput,
            searchLocationBtn: !!searchLocationBtn,
            mapContainer: !!mapContainer,
            latitudeInput: !!latitudeInput,
            longitudeInput: !!longitudeInput
        });

        if (!locationInput || !latitudeInput || !longitudeInput || !searchLocationBtn || !form || !submitBtn || !mapContainer) {
            console.error('One or more critical DOM elements are missing');
            return;
        }

        // Initialize Leaflet Map with default coordinates (Tunis)
        let map;
        try {
            map = L.map('map').setView([36.8065, 10.1815], 13);
            console.log('Map initialized successfully');
        } catch (error) {
            console.error('Error initializing map:', error);
            return;
        }

        // Add tile layer
        try {
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            console.log('Tile layer added successfully');
        } catch (error) {
            console.error('Error adding tile layer:', error);
            return;
        }

        // Add default marker
        let marker = L.marker([36.8065, 10.1815]).addTo(map)
            .bindPopup('Default Location: Tunis')
            .openPopup();
        console.log('Default marker added');

        // Handle image selection
        imageInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                if (!file.type.match('image.*')) {
                    showError(imageInput, 'Please select a valid image file (JPG, PNG, WEBP)');
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block';
                    placeholderText.style.display = 'none';
                    removeImageBtn.style.display = 'block';
                    clearError(imageInput);
                };
                reader.readAsDataURL(file);
            }
        });

        // Handle the "Remove" button
        removeImageBtn.addEventListener('click', function() {
            imageInput.value = '';
            imagePreview.src = '';
            imagePreview.style.display = 'none';
            placeholderText.style.display = 'block';
            removeImageBtn.style.display = 'none';
            showError(imageInput, 'Please select an image');
        });

        // Search location functionality
        searchLocationBtn.addEventListener('click', function() {
            const address = locationInput.value.trim();
            if (!address) {
                showError(locationInput, 'Please enter a location');
                return;
            }

            console.log('Searching for location:', address);

            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=1`, {
                headers: {
                    'User-Agent': 'GymifyApp/1.0 (contact@example.com)'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Nominatim search response:', data);
                if (data && data.length > 0) {
                    const lat = parseFloat(data[0].lat);
                    const lon = parseFloat(data[0].lon);
                    
                    // Update map view
                    map.setView([lat, lon], 15);
                    
                    // Update or create marker
                    if (marker) {
                        marker.setLatLng([lat, lon]);
                    } else {
                        marker = L.marker([lat, lon]).addTo(map);
                    }
                    
                    // Update popup
                    marker.bindPopup(`<b>${address}</b><br>Lat: ${lat.toFixed(6)}, Lon: ${lon.toFixed(6)}`)
                        .openPopup();
                    
                    // Update hidden inputs
                    latitudeInput.value = lat;
                    longitudeInput.value = lon;
                    clearError(locationInput);
                } else {
                    showError(locationInput, 'Location not found. Please try a different address.');
                }
            })
            .catch(error => {
                console.error('Error fetching location:', error);
                showError(locationInput, 'Error fetching location. Please try again.');
            });
        });

        // Allow clicking on the map to set location
        map.on('click', function(e) {
            const { lat, lng } = e.latlng;
            console.log('Map clicked at:', lat, lng);

            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`, {
                headers: {
                    'User-Agent': 'GymifyApp/1.0 (contact@example.com)'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Nominatim reverse geocoding response:', data);
                const address = data.display_name || 'Selected Location';
                
                // Update marker
                if (marker) {
                    marker.setLatLng([lat, lng]);
                } else {
                    marker = L.marker([lat, lng]).addTo(map);
                }
                
                marker.bindPopup(`<b>${address}</b><br>Lat: ${lat.toFixed(6)}, Lon: ${lng.toFixed(6)}`)
                    .openPopup();
                
                // Update inputs
                locationInput.value = address;
                latitudeInput.value = lat;
                longitudeInput.value = lng;
                clearError(locationInput);
            })
            .catch(error => {
                console.error('Error in reverse geocoding:', error);
                showError(locationInput, 'Error fetching location. Please try again.');
            });
        });

        // Form validation
        form.addEventListener('submit', function(e) {
            let isValid = true;
            
            const fieldsToValidate = [
                { input: document.getElementById('events_nom'), required: true },
                { input: imageInput, required: true },
                { input: document.getElementById('events_date'), required: true },
                { input: document.getElementById('events_heure_debut'), required: true },
                { input: document.getElementById('events_heure_fin'), required: true },
                { input: document.getElementById('events_type'), required: true },
                { input: document.getElementById('events_reward'), required: true },
                { input: document.getElementById('events_description'), required: true },
                { input: document.getElementById('events_lieu'), required: true }
            ];
            
            fieldsToValidate.forEach(field => {
                if (field.required && !validateField(field.input)) {
                    isValid = false;
                }
            });

            // Validate that coordinates are set
            if (!latitudeInput.value || !longitudeInput.value) {
                showError(locationInput, 'Please search for a location or click on the map to set the coordinates');
                isValid = false;
            }

            if (!isValid) {
                e.preventDefault();
                
                const firstInvalid = form.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                }
            } else {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
            }
        });

        // Handle the "Cancel" button
        cancelBtn.addEventListener('click', function() {
            form.reset();
            imagePreview.style.display = 'none';
            placeholderText.style.display = 'block';
            removeImageBtn.style.display = 'none';
            form.querySelectorAll('.is-invalid').forEach(input => clearError(input));
            window.location.href = '/events/';
        });

        // Function to display errors
        function showError(input, message) {
            if (!input) return;

            let formGroup;
            if (input === imageInput) {
                formGroup = input.closest('.image-upload-container');
            } else {
                formGroup = input.closest('.form-group') || input.closest('.mb-4');
            }
            
            let errorElement = formGroup.querySelector('.invalid-feedback');
            if (!errorElement) {
                errorElement = document.createElement('div');
                errorElement.className = 'invalid-feedback d-block';
                formGroup.appendChild(errorElement);
            }
            
            errorElement.textContent = message;
            input.classList.add('is-invalid');
            
            if (input === imageInput) {
                placeholderText.classList.add('border-danger');
                placeholderText.innerHTML = '<i class="fas fa-exclamation-circle fa-3x text-danger mb-3 d-block"></i><p class="text-danger">' + message + '</p>';
            }
        }

        // Function to clear errors
        function clearError(input) {
            if (!input) return;

            let formGroup;
            if (input === imageInput) {
                formGroup = input.closest('.image-upload-container');
                placeholderText.innerHTML = '<i class="fas fa-image fa-3x text-muted mb-3 d-block"></i><p class="text-muted">No image selected</p>';
                placeholderText.classList.remove('border-danger');
            } else {
                formGroup = input.closest('.form-group') || input.closest('.mb-4');
            }
            
            const errorElement = formGroup.querySelector('.invalid-feedback');
            if (errorElement) {
                errorElement.remove();
            }
            
            input.classList.remove('is-invalid');
        }

        // Real-time validation
        function validateField(input) {
            if (!input) return false;

            if (input === imageInput) {
                if (!imageInput.files.length) {
                    showError(imageInput, 'Please select an image');
                    return false;
                }
            } else if (input.hasAttribute('required') && !input.value.trim()) {
                showError(input, `Please enter ${input.placeholder || 'a value'}`);
                return false;
            }
            clearError(input);
            return true;
        }

        // Real-time validation on blur
        document.querySelectorAll('input[required], textarea[required], select[required]').forEach(input => {
            input.addEventListener('blur', function() {
                validateField(this);
            });
        });
    });
    </script>
{% endblock %}