{% extends 'responsable/homepage_responsable.html.twig' %}

{% block title %}{{ page_title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('app') }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <style>
        .navbar-form.nav-search { display: none !important; }
        .navbar-header { justify-content: flex-end !important; }
        .modern-form .form-control:focus { box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25); }
        .border-dashed { border: 2px dashed #dee2e6; }
        .image-upload-container:hover .border-dashed { border-color: #3a7bd5; }
        .image-preview-container { position: relative; min-height: 200px; display: flex; align-items: center; justify-content: center; }
        #imagePreview, #teamImagePreview { max-width: 100%; max-height: 200px; object-fit: contain; border-radius: 8px; }
        .is-invalid { border: 1px solid #dc3545 !important; }
        .invalid-feedback { color: #dc3545; font-size: 0.875em; display: none; }
        .is-invalid ~ .invalid-feedback, .is-invalid + .input-group ~ .invalid-feedback { display: block; }
        .border-danger { border-color: #dc3545 !important; }
        #submitBtn:disabled, #saveTeamBtn:disabled { opacity: 0.7; cursor: not-allowed; }
        #map { width: 100%; height: 400px; margin-top: 10px; border-radius: 8px; z-index: 1; }
        .leaflet-container { height: 100%; width: 100%; }
        .modal-content { border-radius: 15px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }
        .modal-header { background: #f8f9fa; border-bottom: 1px solid #dee2e6; }
        .modal-footer { border-top: 1px solid #dee2e6; }
        .team-list { margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; }
        .team-item { display: flex; justify-content: space-between; align-items: center; padding: 8px; border-bottom: 1px solid #dee2e6; }
        .team-item:last-child { border-bottom: none; }
        .remove-team-btn { cursor: pointer; color: #dc3545; }
        .input-group-text { min-width: 45px; justify-content: center; }
        .hidden-input-group { display: none; }
        .card { border-radius: 15px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }
        .form-label { font-weight: 600; color: #495057; }
        .form-control, .form-select { border-radius: 8px; padding: 10px 15px; }
        .btn { border-radius: 25px; padding: 10px 20px; }
    </style>
{% endblock %}

{% block body %}
    <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
        <div>
            <h3 class="fw-bold mb-3">{{ page_title }}</h3>
            <h6 class="op-7 mb-2">Create a New Event</h6>
        </div>
    </div>

    {% for message in app.flashes('success') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}

    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-body p-4">
                    {{ form_start(form, {
                        'method': 'POST',
                        'action': path('app_events_new'),
                        'attr': {
                            'enctype': 'multipart/form-data',
                            'class': 'modern-form needs-validation',
                            'id': 'eventForm',
                            'novalidate': 'novalidate'
                        }
                    }) }}

                    <!-- Event Name -->
                    <div class="mb-3">
                        {{ form_label(form.nom, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-heading text-primary"></i></span>
                            {{ form_widget(form.nom, {
                                'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Enter event name'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.nom) }}
                        </div>
                    </div>

                    <!-- Event Image -->
                    <div class="mb-3 image-upload-container">
                        {{ form_label(form.imageFile, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="image-preview-container text-center mb-3 position-relative">
                            <img id="imagePreview" src="" class="image-preview shadow-sm mx-auto d-block" style="display: none;">
                            <div id="placeholderText" class="position-absolute top-50 start-50 translate-middle w-100 py-5 border-2 border-dashed rounded-3 bg-light">
                                <i class="fas fa-camera fa-3x text-muted mb-3 d-block"></i>
                                <p class="text-muted">No image selected</p>
                            </div>
                        </div>
                        <div class="d-flex gap-3">
                            <div class="flex-grow-1">
                                {{ form_widget(form.imageFile, {
                                    'attr': {
                                        'class': 'form-control d-none',
                                        'accept': 'image/jpeg,image/png,image/webp'
                                    }
                                }) }}
                                <label for="{{ form.imageFile.vars.id }}" class="btn btn-outline-primary w-100 py-2">
                                    <i class="fas fa-camera me-2"></i>Choose Image
                                </label>
                            </div>
                            <button type="button" id="removeImageBtn" class="btn btn-outline-danger py-2" style="display: none;">
                                <i class="fas fa-trash-alt me-2"></i>Remove
                            </button>
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.imageFile) }}
                        </div>
                        <small class="text-muted d-block mt-2">Recommended size: 1200x800px</small>
                    </div>

                    <!-- Date -->
                    <div class="mb-3">
                        {{ form_label(form.date, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-calendar text-primary"></i></span>
                            {{ form_widget(form.date, {
                                'attr': {
                                    'class': 'form-control'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.date) }}
                        </div>
                    </div>

                    <!-- Start and End Time -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            {{ form_label(form.heure_debut, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-clock text-primary"></i></span>
                                {{ form_widget(form.heure_debut, {
                                    'attr': {
                                        'class': 'form-control'
                                    }
                                }) }}
                            </div>
                            <div class="invalid-feedback">
                                {{ form_errors(form.heure_debut) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            {{ form_label(form.heure_fin, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-clock text-primary"></i></span>
                                {{ form_widget(form.heure_fin, {
                                    'attr': {
                                        'class': 'form-control'
                                    }
                                }) }}
                            </div>
                            <div class="invalid-feedback">
                                {{ form_errors(form.heure_fin) }}
                            </div>
                        </div>
                    </div>

                    <!-- Event Type -->
                    <div class="mb-3">
                        {{ form_label(form.type, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-list text-primary"></i></span>
                            {{ form_widget(form.type, {
                                'attr': {
                                    'class': 'form-control form-select'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.type) }}
                        </div>
                    </div>

                    <!-- Reward -->
                    <div class="mb-3">
                        {{ form_label(form.reward, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-trophy text-primary"></i></span>
                            {{ form_widget(form.reward, {
                                'attr': {
                                    'class': 'form-control form-select'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.reward) }}
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="mb-3">
                        {{ form_label(form.description, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-align-left text-primary"></i></span>
                            {{ form_widget(form.description, {
                                'attr': {
                                    'class': 'form-control',
                                    'rows': '4',
                                    'placeholder': 'Describe the event...'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.description) }}
                        </div>
                    </div>

                    <!-- Location -->
                    <div class="mb-3">
                        {{ form_label(form.lieu, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-map-marker-alt text-primary"></i></span>
                            {{ form_widget(form.lieu, {
                                'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Enter the location'
                                }
                            }) }}
                            <button type="button" id="searchLocationBtn" class="btn btn-outline-primary">
                                <i class="fas fa-search me-2"></i>Search
                            </button>
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(form.lieu) }}
                        </div>
                        <div id="map"></div>
                        <div class="hidden-input-group">
                            {{ form_widget(form.latitude, {'attr': {'id': 'events_latitude'}}) }}
                            {{ form_widget(form.longitude, {'attr': {'id': 'events_longitude'}}) }}
                        </div>
                    </div>

                    <!-- Add Teams Button -->
                    <div class="mb-3">
                        <button
                            type="button"
                            id="addTeamsEventBtn"
                            class="btn btn-outline-success"
                            data-bs-toggle="modal"
                            data-bs-target="#addTeamModal"
                        >
                            <i class="fas fa-users me-2"></i>Add Teams
                        </button>
                    </div>

                    <!-- Teams List -->
                    <div class="mb-3">
                        <label class="form-label fw-bold text-muted small">Added Teams</label>
                        <div id="teamList" class="team-list">
                            <p class="text-muted">No teams added yet.</p>
                        </div>
                        <div class="invalid-feedback" id="eventTeamsError"></div>
                        <input type="hidden" name="teams" id="teamsInput">
                    </div>

                    {{ form_row(form._token) }}

                    <!-- Buttons -->
                    <div class="d-flex justify-content-end gap-3">
                        <a href="{{ path('app_events_index') }}" class="btn btn-outline-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Cancel
                        </a>
                        <button type="submit" id="submitBtn" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Save
                        </button>
                    </div>

                    {{ form_end(form, {'render_rest': false}) }}
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Adding Team -->
    <div
        class="modal fade"
        id="addTeamModal"
        tabindex="-1"
        aria-labelledby="addTeamModalLabel"
        aria-hidden="true"
    >
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addTeamModalLabel">Add New Team to Event</h5>
                    <button
                        type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"
                    ></button>
                </div>
                <div class="modal-body">
                    {{ form_start(team_form, {
                        'method': 'POST',
                        'action': path('app_equipe_new'),
                        'attr': {
                            'enctype': 'multipart/form-data',
                            'class': 'modern-form needs-validation',
                            'id': 'teamForm',
                            'novalidate': 'novalidate'
                        }
                    }) }}

                    <!-- Team Name -->
                    <div class="mb-3">
                        {{ form_label(team_form.nom, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-heading text-primary"></i></span>
                            {{ form_widget(team_form.nom, {
                                'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Enter team name'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(team_form.nom) }}
                        </div>
                    </div>

                    <!-- Team Image -->
                    <div class="mb-3 image-upload-container">
                        {{ form_label(team_form.imageFile, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="image-preview-container text-center mb-3 position-relative">
                            <img
                                id="teamImagePreview"
                                src=""
                                class="image-preview shadow-sm mx-auto d-block"
                                style="display: none;"
                            >
                            <div
                                id="teamPlaceholderText"
                                class="position-absolute top-50 start-50 translate-middle w-100 py-5 border-2 border-dashed rounded-3 bg-light"
                            >
                                <i class="fas fa-camera fa-3x text-muted mb-3 d-block"></i>
                                <p class="text-muted">No image selected</p>
                            </div>
                        </div>
                        <div class="d-flex gap-3">
                            <div class="flex-grow-1">
                                {{ form_widget(team_form.imageFile, {
                                    'attr': {
                                        'class': 'form-control d-none',
                                        'accept': 'image/jpeg,image/png,image/webp'
                                    }
                                }) }}
                                <label
                                    for="{{ team_form.imageFile.vars.id }}"
                                    class="btn btn-outline-primary w-100 py-2"
                                >
                                    <i class="fas fa-camera me-2"></i>Choose Image
                                </label>
                            </div>
                            <button
                                type="button"
                                id="teamRemoveImageBtn"
                                class="btn btn-outline-danger py-2"
                                style="display: none;"
                            >
                                <i class="fas fa-trash-alt me-2"></i>Remove
                            </button>
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(team_form.imageFile) }}
                        </div>
                        <small class="text-muted d-block mt-2">Recommended size: 1200x800px</small>
                    </div>

                    <!-- Level -->
                    <div class="mb-3">
                        {{ form_label(team_form.niveau, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-list text-primary"></i></span>
                            {{ form_widget(team_form.niveau, {
                                'attr': {
                                    'class': 'form-control form-select'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(team_form.niveau) }}
                        </div>
                    </div>

                    <!-- Number of Members -->
                    <div class="mb-3">
                        {{ form_label(team_form.nombre_membres, null, {'label_attr': {'class': 'form-label fw-bold text-muted small'}}) }}
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-users text-primary"></i></span>
                            {{ form_widget(team_form.nombre_membres, {
                                'attr': {
                                    'class': 'form-control',
                                    'type': 'number',
                                    'min': '0',
                                    'max': '8',
                                    'placeholder': 'Enter number of members'
                                }
                            }) }}
                        </div>
                        <div class="invalid-feedback">
                            {{ form_errors(team_form.nombre_membres) }}
                        </div>
                    </div>

                    {{ form_row(team_form._token) }}

                    {{ form_end(team_form, {'render_rest': false}) }}
                </div>
                <div class="modal-footer">
                    <button
                        type="button"
                        class="btn btn-outline-secondary"
                        data-bs-dismiss="modal"
                    >Close</button>
                    <button type="button" id="saveTeamBtn" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save
                    </button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('app') }}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // DOM elements for Event Form
        const imageInput = document.getElementById('{{ form.imageFile.vars.id }}');
        const imagePreview = document.getElementById('imagePreview');
        const placeholderText = document.getElementById('placeholderText');
        const removeImageBtn = document.getElementById('removeImageBtn');
        const form = document.getElementById('eventForm');
        const submitBtn = document.getElementById('submitBtn');
        const cancelBtn = document.querySelector('a[href="{{ path('app_events_index') }}"]');
        const locationInput = document.getElementById('{{ form.lieu.vars.id }}');
        const searchLocationBtn = document.getElementById('searchLocationBtn');
        const mapContainer = document.getElementById('map');
        const latitudeInput = document.getElementById('events_latitude');
        const longitudeInput = document.getElementById('events_longitude');
        const teamList = document.getElementById('teamList');
        const teamsInput = document.getElementById('teamsInput');

        // DOM elements for Team Form (Modal)
        const teamForm = document.getElementById('teamForm');
        const teamImageInput = document.getElementById('{{ team_form.imageFile.vars.id }}');
        const teamImagePreview = document.getElementById('teamImagePreview');
        const teamPlaceholderText = document.getElementById('teamPlaceholderText');
        const teamRemoveImageBtn = document.getElementById('teamRemoveImageBtn');
        const saveTeamBtn = document.getElementById('saveTeamBtn');
        const addTeamModalEl = document.getElementById('addTeamModal');
        const addTeamModal = new bootstrap.Modal(addTeamModalEl);

        // Check if critical elements exist
        if (!locationInput || !latitudeInput || !longitudeInput || !searchLocationBtn || !form || !submitBtn || !mapContainer || !teamForm || !teamImageInput || !saveTeamBtn || !teamList || !teamsInput || !addTeamModalEl) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Required form elements are missing. Please contact support.',
            });
            return;
        }

        // Initialize Leaflet Map
        let map;
        let marker;
        try {
            map = L.map(mapContainer, {
                center: [36.8065, 10.1815], // Default: Tunis
                zoom: 13,
                zoomControl: true,
                scrollWheelZoom: false
            });

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19
            }).addTo(map);

            marker = L.marker([36.8065, 10.1815]).addTo(map)
                .bindPopup('Default Location: Tunis')
                .openPopup();

            latitudeInput.value = 36.8065;
            longitudeInput.value = 10.1815;
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Map Error',
                text: 'Failed to initialize the map. Please try again later.',
            });
            return;
        }

        setTimeout(() => map.invalidateSize(), 100);

        // Handle image selection for Event Form
        if (imageInput) {
            imageInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imagePreview.src = e.target.result;
                        imagePreview.style.display = 'block';
                        placeholderText.style.display = 'none';
                        removeImageBtn.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        // Handle the "Remove" button for Event Form
        if (removeImageBtn) {
            removeImageBtn.addEventListener('click', function() {
                imageInput.value = '';
                imagePreview.src = '';
                imagePreview.style.display = 'none';
                placeholderText.style.display = 'block';
                removeImageBtn.style.display = 'none';
            });
        }

        // Handle image selection for Team Form
        if (teamImageInput) {
            teamImageInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        teamImagePreview.src = e.target.result;
                        teamImagePreview.style.display = 'block';
                        teamPlaceholderText.style.display = 'none';
                        teamRemoveImageBtn.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        // Handle the "Remove" button for Team Form
        if (teamRemoveImageBtn) {
            teamRemoveImageBtn.addEventListener('click', function() {
                teamImageInput.value = '';
                teamImagePreview.src = '';
                teamImagePreview.style.display = 'none';
                teamPlaceholderText.style.display = 'block';
                teamRemoveImageBtn.style.display = 'none';
            });
        }

        // Search location functionality
        if (searchLocationBtn) {
            searchLocationBtn.addEventListener('click', function() {
                const address = locationInput.value.trim();
                if (!address) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Empty Location',
                        text: 'Please enter a location to search.',
                    });
                    return;
                }

                fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=1&addressdetails=1`, {
                    headers: {
                        'User-Agent': 'GymifyApp/1.0 (contact@example.com)',
                        'Accept': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    if (data && data.length > 0) {
                        const lat = parseFloat(data[0].lat);
                        const lon = parseFloat(data[0].lon);
                        map.setView([lat, lon], 15);
                        if (marker) marker.setLatLng([lat, lon]);
                        else marker = L.marker([lat, lon]).addTo(map);
                        marker.bindPopup(`<b>${data[0].display_name}</b>`).openPopup();
                        latitudeInput.value = lat.toFixed(6);
                        longitudeInput.value = lon.toFixed(6);
                        locationInput.value = data[0].display_name;
                        map.invalidateSize();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Location Not Found',
                            text: 'Could not find the specified location.',
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Unable to fetch location.',
                    });
                });
            });
        }

        // Allow clicking on the map to set location
        if (map) {
            map.on('click', function(e) {
                const { lat, lng } = e.latlng;
                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`, {
                    headers: {
                        'User-Agent': 'GymifyApp/1.0 (contact@example.com)',
                        'Accept': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    const address = data.display_name || 'Selected Location';
                    if (marker) marker.setLatLng([lat, lng]);
                    else marker = L.marker([lat, lng]).addTo(map);
                    marker.bindPopup(`<b>${address}</b>`).openPopup();
                    locationInput.value = address;
                    latitudeInput.value = lat.toFixed(6);
                    longitudeInput.value = lng.toFixed(6);
                    map.invalidateSize();
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Unable to fetch location details.',
                    });
                });
            });
        }

        // Manage added teams
        let addedTeams = [];

        function updateTeamList() {
            teamList.innerHTML = addedTeams.length === 0
                ? '<p class="text-muted">No teams added yet.</p>'
                : addedTeams.map(team => `
                    <div class="team-item" data-id="${team.id}">
                        <span>${team.nom}</span>
                        <i class="fas fa-times remove-team-btn" data-id="${team.id}"></i>
                    </div>
                `).join('');

            document.querySelectorAll('.remove-team-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const teamId = this.getAttribute('data-id');
                    addedTeams = addedTeams.filter(team => team.id != teamId);
                    updateTeamList();
                    updateTeamsInput();
                });
            });
        }

        function updateTeamsInput() {
            teamsInput.value = JSON.stringify(addedTeams.map(team => team.id));
        }

        // Clear form errors
        function clearFormErrors(formElement) {
            formElement.querySelectorAll('.is-invalid').forEach(input => input.classList.remove('is-invalid'));
            formElement.querySelectorAll('.invalid-feedback').forEach(error => error.textContent = '');
            if (formElement === form) {
                const teamsErrorElement = document.getElementById('eventTeamsError');
                if (teamsErrorElement) {
                    teamsErrorElement.textContent = '';
                    teamsErrorElement.style.display = 'none';
                }
            }
        }

        updateTeamList(); // Initialize team list

        // Handle Team Form Submission
        if (saveTeamBtn) {
            saveTeamBtn.addEventListener('click', function() {
                clearFormErrors(teamForm);
                const formData = new FormData(teamForm);
                saveTeamBtn.disabled = true;
                saveTeamBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...';

                fetch(teamForm.action, {
                    method: 'POST',
                    body: formData,
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(response => response.json())
                .then(data => {
                    saveTeamBtn.disabled = false;
                    saveTeamBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save';

                    if (data.success && data.teamId && data.nom) {
                        addedTeams.push({ id: data.teamId, nom: data.nom });
                        updateTeamList();
                        updateTeamsInput();
                        Swal.fire({
                            icon: 'success',
                            title: 'Team Added',
                            text: 'The team has been added successfully!',
                        }).then(() => {
                            addTeamModal.hide();
                            teamForm.reset();
                            teamImagePreview.src = '';
                            teamImagePreview.style.display = 'none';
                            teamPlaceholderText.style.display = 'block';
                            teamRemoveImageBtn.style.display = 'none';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to add the team.',
                        });
                        if (data.errors) {
                            Object.keys(data.errors).forEach(field => {
                                const input = teamForm.querySelector(`[name="equipe[${field}]"]`);
                                if (input) {
                                    input.classList.add('is-invalid');
                                    const errorElement = input.closest('.mb-3').querySelector('.invalid-feedback');
                                    if (errorElement) {
                                        errorElement.textContent = data.errors[field].join(', ');
                                    }
                                }
                            });
                        }
                    }
                })
                .catch(error => {
                    saveTeamBtn.disabled = false;
                    saveTeamBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save';
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while adding the team.',
                    });
                });
            });
        }

        // Handle Event Form Submission
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                clearFormErrors(form);
                const formData = new FormData(form);
                formData.set('teams', teamsInput.value);

                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...';

                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                .then(response => response.json())
                .then(data => {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save';

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Event Added Successfully',
                            text: 'The event has been created successfully!',
                        }).then(() => {
                            window.location.href = '{{ path('app_events_index') }}';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to create the event.',
                        });
                        if (data.errors) {
                            Object.keys(data.errors).forEach(field => {
                                const input = form.querySelector(`[name="events[${field}]"]`);
                                if (input) {
                                    input.classList.add('is-invalid');
                                    const errorElement = input.closest('.mb-3').querySelector('.invalid-feedback');
                                    if (errorElement) {
                                        errorElement.textContent = data.errors[field].join(', ');
                                    }
                                } else if (field === 'teams') {
                                    const teamsErrorElement = document.getElementById('eventTeamsError');
                                    if (teamsErrorElement) {
                                        teamsErrorElement.textContent = data.errors[field].join(', ');
                                        teamsErrorElement.style.display = 'block';
                                    }
                                }
                            });
                        }
                    }
                })
                .catch(error => {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save';
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An unexpected error occurred.',
                    });
                });
            });
        }

        // Ensure modal backdrop is removed and form is reset
        addTeamModalEl.addEventListener('hidden.bs.modal', function() {
            document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
            document.body.classList.remove('modal-open');
            document.body.style.overflow = 'auto';
            document.body.style.paddingRight = '';
            teamForm.reset();
            teamImagePreview.src = '';
            teamImagePreview.style.display = 'none';
            teamPlaceholderText.style.display = 'block';
            teamRemoveImageBtn.style.display = 'none';
            clearFormErrors(teamForm);
        });

        // Handle Cancel button
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function(e) {
                e.preventDefault();
                window.location.href = '{{ path('app_events_index') }}';
            });
        }
    });
    </script>
{% endblock %}