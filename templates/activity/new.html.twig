{% extends 'admin/homepageadmin.html.twig' %}

{% block title %}{{ page_title }}{% endblock %}

{% block body %}
<div class="container">
    <div class="d-flex align-items-center justify-content-between mb-4">
        <h1 class="fw-bold">{{ page_title }}</h1>
    </div>

    {# Flash messages #}
    {% for message in app.flashes('success') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}

    <div class="card shadow-lg">
        <div class="card-body p-4">
            {{ form_start(form, {
                'attr': {
                    'id': 'activityForm',
                    'novalidate': 'novalidate',
                    'enctype': 'multipart/form-data',
                    'action': path('app_activity_create')
                }
            }) }}

            <!-- Activity Name -->
            <div class="mb-4">
                {{ form_label(form.nom, null, {
                    'label_attr': {'class': 'form-label fw-bold'}
                }) }}
                {{ form_widget(form.nom, {
                    'attr': {
                        'class': 'form-control',
                        'data-maxlength': '50',
                        'required': 'required',
                        'aria-describedby': 'nameCounter'
                    }
                }) }}
                {{ form_errors(form.nom) }}
                <div class="invalid-feedback" data-error="activity.name.blank">Please enter an activity name</div>
                <div class="invalid-feedback" data-error="activity.name.too_long">Name must be less than 50 characters</div>
                <small class="text-muted float-end"><span id="nameCounter">0</span>/50</small>
            </div>

            <!-- Image Upload -->
            <div class="mb-4">
                {{ form_label(form.imageFile, null, {
                    'label_attr': {'class': 'form-label fw-bold'}
                }) }}
                <div class="image-upload-container border rounded p-3">
                    <div class="image-preview-container text-center mb-3" style="min-height: 200px;">
                        <img id="imagePreview" src="" class="img-fluid rounded d-none" style="max-height: 300px;" alt="Activity image preview">
                        <div id="imagePlaceholder" class="d-flex flex-column align-items-center justify-content-center h-100">
                            <i class="fas fa-image fa-3x text-muted mb-3" aria-hidden="true"></i>
                            <p class="text-muted">Drag & drop or click to upload</p>
                        </div>
                    </div>
                    {{ form_widget(form.imageFile, {
                        'attr': {
                            'class': 'd-none',
                            'accept': 'image/jpeg,image/png,image/webp',
                            'required': 'required'
                        }
                    }) }}
                    <button type="button" class="btn btn-primary w-100" id="uploadBtn" aria-label="Upload image">
                        <i class="fas fa-cloud-upload-alt me-2" aria-hidden="true"></i> Upload Image
                    </button>
                    {{ form_errors(form.imageFile) }}
                    <div class="invalid-feedback mt-2" data-error="activity.image.required">Please select an image</div>
                    <div class="invalid-feedback mt-2" data-error="activity.image.invalid_type">Only JPG, PNG or WEBP allowed</div>
                </div>
            </div>

            <!-- Activity Type -->
            <div class="mb-4">
                <legend class="form-label fw-bold">Activity Type *</legend>
                <div class="row g-3">
                    {% for child in form.type %}
                        <div class="col-md-4">
                            {{ form_widget(child, {
                                'attr': {
                                    'class': 'btn-check',
                                    'required': 'required',
                                    'checked': child.vars.value == 'PERSONAL_TRAINING' ? 'checked' : null
                                }
                            }) }}
                            <label class="btn btn-outline-primary w-100 h-100 p-3 rounded d-flex flex-column align-items-center justify-content-center"
                                   for="{{ child.vars.id }}"
                                   aria-label="{{ child.vars.label }}">
                                <i class="fas 
                                    {% if child.vars.value == 'PERSONAL_TRAINING' %}fa-user-tie
                                    {% elseif child.vars.value == 'GROUP_ACTIVITY' %}fa-users
                                    {% else %}fa-comments{% endif %} 
                                    fa-2x mb-2" aria-hidden="true"></i>
                                <span>{{ child.vars.label }}</span>
                            </label>
                        </div>
                    {% endfor %}
                </div>
                {{ form_errors(form.type) }}
                <div class="invalid-feedback mt-2" data-error="activity.type.invalid">Please select a valid activity type</div>
            </div>

            <!-- Description -->
            <div class="mb-4">
                {{ form_label(form.description, null, {
                    'label_attr': {'class': 'form-label fw-bold'}
                }) }}
                {{ form_widget(form.description, {
                    'attr': {
                        'class': 'form-control',
                        'rows': '4',
                        'data-maxlength': '300',
                        'required': 'required',
                        'aria-describedby': 'descCounter'
                    }
                }) }}
                {{ form_errors(form.description) }}
                <div class="invalid-feedback" data-error="activity.description.blank">Please enter a description</div>
                <div class="invalid-feedback" data-error="activity.description.too_long">Description must be less than 300 characters</div>
                <small class="text-muted float-end"><span id="descCounter">0</span>/300</small>
            </div>

            <!-- Submit Button -->
            <div class="d-grid mt-4">
                <button type="submit" class="btn btn-primary btn-lg py-3" id="submitBtn">
                    <i class="fas fa-save me-2" aria-hidden="true"></i> Create Activity
                </button>
                <a href="{{ path('app_activity_index') }}" class="btn btn-outline-secondary btn-lg py-3 mt-2">
                    <i class="fas fa-times me-2" aria-hidden="true"></i> Cancel
                </a>
            </div>

            {{ form_end(form) }}
        </div>
    </div>
</div>

<style>
    .navbar-form.nav-search { display: none !important; }

    .image-upload-container {
        transition: border-color 0.3s;
    }
    .image-upload-container:hover {
        border-color: #0d6efd !important;
    }
    .is-invalid {
        border-color: #dc3545 !important;
    }
    .btn-check:checked + label {
        background-color: rgb(74, 136, 222) !important;
        color: white;
        border-color:rgb(15, 21, 193) !important;
    }
    #submitBtn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('activityForm');
    const imageInput = document.getElementById('{{ form.imageFile.vars.id }}');
    const imagePreview = document.getElementById('imagePreview');
    const imagePlaceholder = document.getElementById('imagePlaceholder');
    const uploadBtn = document.getElementById('uploadBtn');
    const submitBtn = document.getElementById('submitBtn');
    const nameCounter = document.getElementById('nameCounter');
    const descCounter = document.getElementById('descCounter');
    const nameInput = document.getElementById('{{ form.nom.vars.id }}');
    const descInput = document.getElementById('{{ form.description.vars.id }}');

    // Character counters
    nameInput.addEventListener('input', function() {
        nameCounter.textContent = this.value.length;
    });

    descInput.addEventListener('input', function() {
        descCounter.textContent = this.value.length;
    });

    // Image upload handling
    uploadBtn.addEventListener('click', () => imageInput.click());
    
    imageInput.addEventListener('change', function() {
        if (this.files && this.files[0]) {
            const file = this.files[0];
            const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
            
            if (!validTypes.includes(file.type)) {
                showError(imageInput, 'activity.image.invalid_type');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.classList.remove('d-none');
                imagePlaceholder.classList.add('d-none');
                clearError(imageInput);
            }
            reader.readAsDataURL(file);
        }
    });

    // Drag and drop
    const uploadContainer = document.querySelector('.image-upload-container');
    
    ['dragenter', 'dragover'].forEach(event => {
        uploadContainer.addEventListener(event, (e) => {
            e.preventDefault();
            uploadContainer.classList.add('border-primary');
        });
    });

    ['dragleave', 'drop'].forEach(event => {
        uploadContainer.addEventListener(event, (e) => {
            e.preventDefault();
            uploadContainer.classList.remove('border-primary');
        });
    });

    uploadContainer.addEventListener('drop', (e) => {
        if (e.dataTransfer.files.length) {
            imageInput.files = e.dataTransfer.files;
            const event = new Event('change');
            imageInput.dispatchEvent(event);
        }
    });

    // Form validation
    function showError(input, errorKey) {
        const formGroup = input.closest('.mb-4') || input.closest('.image-upload-container');
        const errorElements = formGroup.querySelectorAll('[data-error]');
        
        errorElements.forEach(el => {
            el.style.display = 'none';
        });
        
        const errorElement = formGroup.querySelector(`[data-error="${errorKey}"]`);
        if (errorElement) {
            errorElement.style.display = 'block';
            input.classList.add('is-invalid');
        }
    }

    function clearError(input) {
        const formGroup = input.closest('.mb-4') || input.closest('.image-upload-container');
        formGroup.querySelectorAll('.invalid-feedback').forEach(el => {
            el.style.display = 'none';
        });
        input.classList.remove('is-invalid');
    }

    function validateField(input) {
        clearError(input);
        
        if (input === imageInput) {
            if (input.required && input.files.length === 0) {
                showError(input, 'activity.image.required');
                return false;
            }
            
            if (input.files.length > 0) {
                const file = input.files[0];
                const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
                
                if (!validTypes.includes(file.type)) {
                    showError(input, 'activity.image.invalid_type');
                    return false;
                }
            }
            return true;
        }

        if (input.required && !input.value.trim()) {
            const errorKey = input.id === '{{ form.nom.vars.id }}' 
                ? 'activity.name.blank' 
                : input.id === '{{ form.description.vars.id }}'
                ? 'activity.description.blank'
                : 'activity.type.invalid';
            showError(input, errorKey);
            return false;
        }

        if (input.dataset.maxlength && input.value.length > input.dataset.maxlength) {
            const errorKey = input.id === '{{ form.nom.vars.id }}' 
                ? 'activity.name.too_long' 
                : 'activity.description.too_long';
            showError(input, errorKey);
            return false;
        }

        return true;
    }

    form.addEventListener('submit', function(e) {
        let isValid = true;
        
        [
            nameInput,
            descInput,
            document.querySelector('input[name="{{ form.type.vars.full_name }}"]:checked'),
            imageInput
        ].forEach(field => {
            if (field && !validateField(field)) {
                isValid = false;
            }
        });

        if (!isValid) {
            e.preventDefault();
            const firstError = form.querySelector('.is-invalid');
            if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        } else {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span> Saving...';
        }
    });

    // Real-time validation
    [nameInput, descInput].forEach(input => {
        input.addEventListener('blur', () => validateField(input));
    });
});
</script>
{% endblock %}